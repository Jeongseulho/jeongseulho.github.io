{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/그림으로 쉽게 배우는 운영체제/2025-01-06-메모리/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1 id=\"절대-주소-상대-주소\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EB%8C%80-%EC%A3%BC%EC%86%8C-%EC%83%81%EB%8C%80-%EC%A3%BC%EC%86%8C\" aria-label=\"절대 주소 상대 주소 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절대 주소, 상대 주소</h1>\n<ul>\n<li>메모리에는 운영체제가 실행되고 있는 공간이 존재</li>\n<li>다른 프로세스가 운영체제의 메모리 공간에 접근하면 안됨</li>\n<li>개발자와 CPU는 0x0 부터 코드가 메모리를 사용하도록 코딩 및 실행 => 상대(논리)주소</li>\n<li>메모리 관리자는 이 상대 주소를 실제 물리적인 주소로 변환하여 메모리를 관리 => 절대(물리)주소</li>\n</ul>\n<h1 id=\"가변-분할-방식세그멘테이션\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B3%80-%EB%B6%84%ED%95%A0-%EB%B0%A9%EC%8B%9D%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98\" aria-label=\"가변 분할 방식세그멘테이션 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가변 분할 방식(세그멘테이션)</h1>\n<ul>\n<li>프로세스에 메모리를 동적으로 할당</li>\n<li>프로세스에 필요한 만큼 메모리를 연속적으로 할당</li>\n<li>외부 단편화 : 메모리 크기가 충분하지만 연속되지 않아 사용하지 못하는 부분 발생 => 1MB, 1MB의 빈공간이 있을때 2MB의 프로세스를 할당할 수 없음 => 떨어져 있는 이 두 부분을 합치는 과정에서 오버헤드드</li>\n</ul>\n<h1 id=\"고정-분할-방식페이징\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EC%A0%95-%EB%B6%84%ED%95%A0-%EB%B0%A9%EC%8B%9D%ED%8E%98%EC%9D%B4%EC%A7%95\" aria-label=\"고정 분할 방식페이징 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고정 분할 방식(페이징)</h1>\n<ul>\n<li>메모리를 여러 개의 고정된 크기로 나누어 사용</li>\n<li>나누어진 조각 1개 이상을 프로세스에게 할당, 불연속일 수 있음</li>\n<li>내부 단편화 : 나누어진 조각에 프로세스를 할당하고 남는 부분이 발생</li>\n</ul>\n<h1 id=\"버디-시스템\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EB%94%94-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-label=\"버디 시스템 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버디 시스템</h1>\n<ul>\n<li>실제 사용하는 메로리 시스템으로 고정, 가변 분할 방식을 혼합</li>\n<li>요청받은 프로세스를 할당할 수 있으면서도 2의 제곱수 중 가장 작도록 분할하여 할당(32KB 프로세스 요청 예시시)</li>\n</ul>\n<p><img src=\"https://github.com/user-attachments/assets/0bde372e-1e52-4bdc-9c5d-b66711c8a2b4\" alt=\"image\"></p>\n<ul>\n<li>프로세스 종료 이후 다시 합침</li>\n<li>내부 단편화 : 가능한 작게 나누어 할당하므로 내부 단편화가 적음</li>\n<li>외부 단편화 : 떨어져 있는 부분을 합치는게 쉬움(2의 제곱수로 나누어져 있으므로)</li>\n</ul>\n<h1 id=\"가상-메모리\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81-%EB%A9%94%EB%AA%A8%EB%A6%AC\" aria-label=\"가상 메모리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상 메모리</h1>\n<ul>\n<li>HDD의 스왑영역을 메모리처럼 사용</li>\n<li>메모리 관리자는 HDD의 스왑영역과 실제 메모리를 합쳐서 관리</li>\n<li>프로세스의 논리 주소는 메모리 관리자를 거쳐 실제 메모리 주소로 변환하며 프로세스는 논리 주소의 위치가 HDD의 스왑영역인지 실제 메모리인지 모름</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#%EC%A0%88%EB%8C%80-%EC%A3%BC%EC%86%8C-%EC%83%81%EB%8C%80-%EC%A3%BC%EC%86%8C\">절대 주소, 상대 주소</a></li>\n<li><a href=\"#%EA%B0%80%EB%B3%80-%EB%B6%84%ED%95%A0-%EB%B0%A9%EC%8B%9D%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98\">가변 분할 방식(세그멘테이션)</a></li>\n<li><a href=\"#%EA%B3%A0%EC%A0%95-%EB%B6%84%ED%95%A0-%EB%B0%A9%EC%8B%9D%ED%8E%98%EC%9D%B4%EC%A7%95\">고정 분할 방식(페이징)</a></li>\n<li><a href=\"#%EB%B2%84%EB%94%94-%EC%8B%9C%EC%8A%A4%ED%85%9C\">버디 시스템</a></li>\n<li><a href=\"#%EA%B0%80%EC%83%81-%EB%A9%94%EB%AA%A8%EB%A6%AC\">가상 메모리</a></li>\n</ul>","frontmatter":{"title":"메모리","date":"2025년 01월 05일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/그림으로 쉽게 배우는 운영체제/2025-01-06-메모리/","previous":{"fields":{"slug":"/lecture/그림으로 쉽게 배우는 운영체제/2025-01-05-상호배제와-데드락/"},"frontmatter":{"categories":["그림으로 쉽게 배우는 운영체제"],"title":"상호배제와 데드락","date":"2025-01-05 01:00:00 +0900","tags":["CS"]}},"next":null}},"staticQueryHashes":[],"slicesMap":{}}