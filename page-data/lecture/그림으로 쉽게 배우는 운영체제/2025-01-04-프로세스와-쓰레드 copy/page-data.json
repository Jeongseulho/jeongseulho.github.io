{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/그림으로 쉽게 배우는 운영체제/2025-01-04-프로세스와-쓰레드 copy/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1 id=\"프로세스의-메모리-구조\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-label=\"프로세스의 메모리 구조 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스의 메모리 구조</h1>\n<ul>\n<li>코드 영역 : 실행할 프로그램의 코드가 저장</li>\n<li>데이터 영역 : 전역 변수, 정적 변수</li>\n<li>힙 영역 : 런타임에 필요시 동적으로 할당되는 부분</li>\n<li>스택 영역 : 함수 관련한 정보(지역변수, 매개변수, 리턴값, 함수 종료 후 돌아갈 주소)</li>\n</ul>\n<h1 id=\"멀티-프로그래밍과-멀티-프로세싱\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%EB%A9%80%ED%8B%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8B%B1\" aria-label=\"멀티 프로그래밍과 멀티 프로세싱 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티 프로그래밍과 멀티 프로세싱</h1>\n<ul>\n<li>멀티 프로그래밍 : 메모리에 여러 프로세스를 동시에 올림</li>\n<li>멀티 프로세싱 : CPU가 시분할하여 여러 프로세스를 동시에 실행</li>\n</ul>\n<h1 id=\"pcbprocess-control-block\" style=\"position:relative;\"><a href=\"#pcbprocess-control-block\" aria-label=\"pcbprocess control block permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PCB(Process Control Block)</h1>\n<ul>\n<li>프로세스의 정보를 저장하는 블록(운영체제 입장에서의 프로세스 그 자체)</li>\n<li>프로세스 생성시 PCB 생성, 프로세스 종료 시 PCB 제거</li>\n<li>각 PCB는 연결리스트 구조로 커널의 메모리에 저장되어 있음(커널만 사용가능한 특수한 메모리 공간)</li>\n</ul>\n<h1 id=\"프로세스-상태\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%81%ED%83%9C\" aria-label=\"프로세스 상태 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 상태</h1>\n<ul>\n<li>PCB에 저장되는 프로세스 상태</li>\n<li>CPU의 시분할 처리를 위한 정보</li>\n</ul>\n<p><img src=\"https://github.com/user-attachments/assets/b739a819-4fbb-4550-b3cc-28893433a50c\" alt=\"image\"></p>\n<ul>\n<li>상태 종류\n<ul>\n<li>new : 메모리에 프로그램 적재를 요청</li>\n<li>ready : 승인 이후 CPU 할당을 기다리는 상태</li>\n<li>ready => running으로 넘어가기 위한 다양한 우선순위 및 방법들이 CPU 스케줄링</li>\n<li>running : CPU를 할당받아 실행 중인 상태, 부여된 시간만큼 실행, 시간 이후 ready 상태로 전환</li>\n<li>waiting : 입출력 등의 이벤트 발생을 기다리는 상태</li>\n<li>terminated : 프로세스 실행 종료</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"컨텍스트-스위칭\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%EC%9C%84%EC%B9%AD\" aria-label=\"컨텍스트 스위칭 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨텍스트 스위칭</h1>\n<ul>\n<li>실행할 프로세스를 전환하는 작업</li>\n<li>기존에 작업하던 프로세스의 내용(CPU의 레지스터 값 등)을 PCB에 저장하고, 다음 프로세스의 내용을 PCB에서 읽어 CPU 레지스터에 저장하며 전환</li>\n</ul>\n<h1 id=\"부모-자식-프로세스\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EB%AA%A8-%EC%9E%90%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\" aria-label=\"부모 자식 프로세스 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부모, 자식 프로세스</h1>\n<ul>\n<li>여러 프로세스는 기본적으로 트리구조를 가짐</li>\n<li>부팅시 생성되는 최초의 프로세스가 존재(system, init 등 OS마다 다름)</li>\n<li>이후 생성되는 프로세스는 이미 존재하는 프로세스를 복사하여 일부 변경함, 이때 부모-자식 관계가 생성</li>\n</ul>\n<p><img src=\"https://github.com/user-attachments/assets/7a974316-c75e-4a42-aa86-c46bcec8c0db\" alt=\"image\"></p>\n<ul>\n<li>자식 프로세스는 종료시 부모 프로세스에게 종료를 알림(부모 프로세스가 먼저 죽어 자식 프로세스가 남아 있는 경우 좀비 프로세스가 됨)</li>\n</ul>\n<h1 id=\"쓰레드\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C\" aria-label=\"쓰레드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드</h1>\n<ul>\n<li>너무 많은 프로세스 생성으로 인한 오버헤드를 줄이기 위해 등장\n<ul>\n<li>메모리 공간</li>\n<li>컨텍스트 스위칭</li>\n<li>프로세스간 통신(IPC)</li>\n</ul>\n</li>\n<li>쓰레드는 한 프로세스의 PCB, 코드, 데이터, 힙 영역을 공유하며 스택 영역만 따로 가짐</li>\n<li>데이터를 공유하므로 안정성은 떨어짐</li>\n<li>각 쓰레드의 TCB(Thread Control Block)가 존재</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\">프로세스의 메모리 구조</a></li>\n<li><a href=\"#%EB%A9%80%ED%8B%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%EB%A9%80%ED%8B%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8B%B1\">멀티 프로그래밍과 멀티 프로세싱</a></li>\n<li><a href=\"#pcbprocess-control-block\">PCB(Process Control Block)</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%81%ED%83%9C\">프로세스 상태</a></li>\n<li><a href=\"#%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%EC%9C%84%EC%B9%AD\">컨텍스트 스위칭</a></li>\n<li><a href=\"#%EB%B6%80%EB%AA%A8-%EC%9E%90%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\">부모, 자식 프로세스</a></li>\n<li><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C\">쓰레드</a></li>\n</ul>","frontmatter":{"title":"프로세스와 쓰레드","date":"2025년 01월 03일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/그림으로 쉽게 배우는 운영체제/2025-01-04-프로세스와-쓰레드 copy/","previous":{"fields":{"slug":"/lecture/그림으로 쉽게 배우는 운영체제/2025-01-04-CPU-스케줄링/"},"frontmatter":{"categories":["그림으로 쉽게 배우는 운영체제"],"title":"CPU 스케줄링","date":"2025-01-04 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/DB/2025-01-04-SQL-데이터-추가,-수정,-삭제/"},"frontmatter":{"categories":["DB"],"title":"SQL 데이터 추가, 수정, 삭제","date":"2025-01-04 18:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}