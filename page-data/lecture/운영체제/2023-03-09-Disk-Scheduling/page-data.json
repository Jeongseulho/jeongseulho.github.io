{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/운영체제/2023-03-09-Disk-Scheduling/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"disk-scheduling\" style=\"position:relative;\"><a href=\"#disk-scheduling\" aria-label=\"disk scheduling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌disk scheduling</h2>\n<ul>\n<li>disk access 요청들의 처리 순서 결정</li>\n<li>disk system의 성능을 향상 하기 위함</li>\n</ul>\n<h2 id=\"성능-평가-기준\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5-%ED%8F%89%EA%B0%80-%EA%B8%B0%EC%A4%80\" aria-label=\"성능 평가 기준 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📑성능 평가 기준</h2>\n<ul>\n<li>Throughput : 단위 시간당 처리량</li>\n<li>Mean response time : 평균 응답 시간</li>\n<li>Predictability : 요청에 응답을 받을 가능성, 요청이 무기한 연기(starvation)되지 않도록 방지</li>\n</ul>\n<h2 id=\"️disk-scheduling-중요-요소\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fdisk-scheduling-%EC%A4%91%EC%9A%94-%EC%9A%94%EC%86%8C\" aria-label=\"️disk scheduling 중요 요소 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❗️disk scheduling 중요 요소</h2>\n<ul>\n<li>seek time : 디스크 head를 필요한 cylinder로 이동하는 시간</li>\n<li>Rotational delay : seek time 이후부터 필요한 sector가 head 위치로 도착하는 시간</li>\n</ul>\n<h3 id=\"optimizing-seek-time\" style=\"position:relative;\"><a href=\"#optimizing-seek-time\" aria-label=\"optimizing seek time permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Optimizing seek time</h3>\n<h3 id=\"️fcfs-first-come-first-service\" style=\"position:relative;\"><a href=\"#%EF%B8%8Ffcfs-first-come-first-service\" aria-label=\"️fcfs first come first service permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️FCFS (First Come First Service)</h3>\n<ul>\n<li>요청이 도착한 순서에 따라 처리</li>\n<li>Low scheduling overhead</li>\n<li>공평한 처리 기법 (무한 대기 방지)</li>\n<li>Disk access 부하가 적은 경우에 적합</li>\n</ul>\n<h3 id=\"️shortest-seek-time-first-sstf\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fshortest-seek-time-first-sstf\" aria-label=\"️shortest seek time first sstf permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️Shortest Seek Time First (SSTF)</h3>\n<ul>\n<li>현재 head 위치에서 가장 가까운 요청 먼저 처리</li>\n<li>이동 거리 작아짐 -> 일할 시간 많아짐 즉, Throughput 증가</li>\n<li>평균 응답 시간 감소</li>\n<li>Predictability 감소, Starvation 현상 발생 가능</li>\n<li>일괄처리 시스템에 적합</li>\n</ul>\n<h3 id=\"️scan-scheduling\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fscan-scheduling\" aria-label=\"️scan scheduling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️Scan Scheduling</h3>\n<ul>\n<li>현재 head의 진행 방향에서, head와 가장 가까운\r\n요청 먼저 처리</li>\n<li>(진행방향 기준) 마지막 cylinder 도착 후,\r\n반대 방향으로 진행</li>\n<li>SSTF의 starvation 문제 해결</li>\n<li>Throughput 및 평균 응답시간 우수</li>\n<li>진행 방향 반대쪽 끝의 요청들의 응답시간 매우 높음</li>\n</ul>\n<h3 id=\"️c-scan-scheduling\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fc-scan-scheduling\" aria-label=\"️c scan scheduling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️C-Scan Scheduling</h3>\n<ul>\n<li>Head가 미리 정해진 방향으로만 이동</li>\n<li>마지막 cylinder 도착 후, 시작 cylinder로 이동 후 재시작</li>\n<li>Scan대비 균등한 기회 제공</li>\n</ul>\n<h3 id=\"️look-scheduling\" style=\"position:relative;\"><a href=\"#%EF%B8%8Flook-scheduling\" aria-label=\"️look scheduling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️Look Scheduling</h3>\n<ul>\n<li>Elevator algorithm</li>\n<li>Scan (C-Scan)에서 현재 진행 방향에 요청이 없으\r\n면 방향 전환(마지막 cylinder까지 이동하지 않음)</li>\n<li>Scan의 불필요한 head 이동 제거</li>\n</ul>\n<h3 id=\"optimizing-rotational-delay\" style=\"position:relative;\"><a href=\"#optimizing-rotational-delay\" aria-label=\"optimizing rotational delay permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Optimizing Rotational Delay</h3>\n<h3 id=\"️shortest-latency-time-first-sltffixed-head인-경우\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fshortest-latency-time-first-sltffixed-head%EC%9D%B8-%EA%B2%BD%EC%9A%B0\" aria-label=\"️shortest latency time first sltffixed head인 경우 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️Shortest Latency Time First (SLTF)(fixed head인 경우)</h3>\n<ul>\n<li>Sector queuing algorithm</li>\n<li>Fixed head disk(Head의 이동이 없음) 시스템에 사용</li>\n<li>각 sector별 queue 유지</li>\n<li>Head 아래 도착한 sector의 queue에 있는 요청을 먼저 처리 함\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/670a634a-2948-46d1-86f6-cb6ba7607c7d/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"️shortest-latency-time-first-sltfmoving-head인-경우\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fshortest-latency-time-first-sltfmoving-head%EC%9D%B8-%EA%B2%BD%EC%9A%B0\" aria-label=\"️shortest latency time first sltfmoving head인 경우 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️Shortest Latency Time First (SLTF)(Moving head인 경우)</h3>\n<ul>\n<li>같은 cylinder에 여러 개의 요청 처리를 위해\r\n사용 가능</li>\n<li>Head가 특정 cylinder에 도착하면, 고정 후 해당 cylinder의 요청을 모두 처리</li>\n</ul>\n<h3 id=\"shortest-positioning-time-first-sptf\" style=\"position:relative;\"><a href=\"#shortest-positioning-time-first-sptf\" aria-label=\"shortest positioning time first sptf permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Shortest Positioning Time First (SPTF)</h3>\n<ul>\n<li>Positioning time = Seek time + rotational delay</li>\n<li>Positioning time이 가장 작은 요청 먼저 처리</li>\n<li>Throughput 증가</li>\n<li>평균 응답 시간 감소</li>\n<li>가장 안쪽과 바깥쪽 cylinder의 요청에 대해 starvation 현상 발생 가능(근처에 있는 애들만 계속 처리하므로)</li>\n</ul>\n<h3 id=\"eschenbach-scheduling\" style=\"position:relative;\"><a href=\"#eschenbach-scheduling\" aria-label=\"eschenbach scheduling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Eschenbach scheduling</h3>\n<ul>\n<li>Positioning time 최적화 시도</li>\n<li>Disk가 1회전 하는 동안 요청을 처리할 수 있도록\r\n요청을 정렬</li>\n<li>단, 한 cylinder내 track, sector들에 대한 다수의 요청이 있는 경우, 다음 회전에 처리 됨</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#disk-scheduling\">📌disk scheduling</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%84%B1%EB%8A%A5-%ED%8F%89%EA%B0%80-%EA%B8%B0%EC%A4%80\">📑성능 평가 기준</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8Fdisk-scheduling-%EC%A4%91%EC%9A%94-%EC%9A%94%EC%86%8C\">❗️disk scheduling 중요 요소</a></p>\n<ul>\n<li><a href=\"#optimizing-seek-time\">📖Optimizing seek time</a></li>\n<li><a href=\"#%EF%B8%8Ffcfs-first-come-first-service\">✏️FCFS (First Come First Service)</a></li>\n<li><a href=\"#%EF%B8%8Fshortest-seek-time-first-sstf\">✏️Shortest Seek Time First (SSTF)</a></li>\n<li><a href=\"#%EF%B8%8Fscan-scheduling\">✏️Scan Scheduling</a></li>\n<li><a href=\"#%EF%B8%8Fc-scan-scheduling\">✏️C-Scan Scheduling</a></li>\n<li><a href=\"#%EF%B8%8Flook-scheduling\">✏️Look Scheduling</a></li>\n<li><a href=\"#optimizing-rotational-delay\">📖Optimizing Rotational Delay</a></li>\n<li><a href=\"#%EF%B8%8Fshortest-latency-time-first-sltffixed-head%EC%9D%B8-%EA%B2%BD%EC%9A%B0\">✏️Shortest Latency Time First (SLTF)(fixed head인 경우)</a></li>\n<li><a href=\"#%EF%B8%8Fshortest-latency-time-first-sltfmoving-head%EC%9D%B8-%EA%B2%BD%EC%9A%B0\">✏️Shortest Latency Time First (SLTF)(Moving head인 경우)</a></li>\n<li><a href=\"#shortest-positioning-time-first-sptf\">📖Shortest Positioning Time First (SPTF)</a></li>\n<li><a href=\"#eschenbach-scheduling\">📖Eschenbach scheduling</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Disk Scheduling","date":"2023년 03월 08일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/운영체제/2023-03-09-Disk-Scheduling/","previous":{"fields":{"slug":"/lecture/운영체제/2023-03-09-RAID-Architecture/"},"frontmatter":{"categories":["운영체제"],"title":"RAID Architecture","date":"2023-03-09 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/네트워크/2023-03-14-네트워크란/"},"frontmatter":{"categories":["네트워크"],"title":"네트워크란","date":"2023-03-14 01:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}