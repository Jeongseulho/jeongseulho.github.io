{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/운영체제/2023-01-22-Process-스케줄링-1/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"다중-프로그래밍\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%A4%91-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"다중 프로그래밍 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌다중 프로그래밍</h2>\n<ul>\n<li>스케줄링 : 하나의 시스템에 여러개의 프로세스 중 자원을 할당 할 프로세스를 선택 하는 것</li>\n<li>자원관리\n<ol>\n<li>시간분할 관리 : 하나의 자원을 여러 스레드들이 번갈아 가며 사용</li>\n</ol>\n<ul>\n<li>ex) 프로세스 스케줄링을 사용한 프로세서</li>\n<li>프로세스 스케줄링 : 프로세서 사용시간을 프로세스들에게 분배</li>\n</ul>\n<ol start=\"2\">\n<li>공간분할 관리 : 하나의 자원을 분할하며 동시에 사용</li>\n</ol>\n<ul>\n<li>ex) 메모리</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"스케줄링의-목적\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81%EC%9D%98-%EB%AA%A9%EC%A0%81\" aria-label=\"스케줄링의 목적 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌스케줄링의 목적</h2>\n<ul>\n<li>시스템의 성능 향상에 목적이 있다.</li>\n<li>시스템의 성능 지표\n<ol>\n<li>응답시간 : 작업요청으로부터 응답까지의 시간</li>\n<li>작업처리량 : 단위 시간동안 완료된 작업 수</li>\n<li>자원 활용도(resource utilization) : 주어진시간(Tc)동안 자원이 활용된시간(Tr)의 비율 Tr/Tc</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"용어-정의\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4-%EC%A0%95%EC%9D%98\" aria-label=\"용어 정의 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💻용어 정의</h1>\n<p><img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/c22139f2-1b2e-4d9d-b0d0-d61cd05bd2e9/image.png\" alt=\"\"></p>\n<h2 id=\"스케줄링-기법-선택-기준\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EA%B8%B0%EB%B2%95-%EC%84%A0%ED%83%9D-%EA%B8%B0%EC%A4%80\" aria-label=\"스케줄링 기법 선택 기준 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌스케줄링 기법 선택 기준</h2>\n<ul>\n<li>프로세스의 특성 : I/O bounded / compute-bounded</li>\n<li>시스템 특성 : batch system / interactive sysmtem</li>\n<li>프로세스의 긴급성 : real-time / non-real-time</li>\n<li>프로세스 우선순위</li>\n</ul>\n<h2 id=\"io-bounded-와-compute-bounded란\" style=\"position:relative;\"><a href=\"#io-bounded-%EC%99%80-compute-bounded%EB%9E%80\" aria-label=\"io bounded 와 compute bounded란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❓I/O bounded 와 compute-bounded란?</h2>\n<ul>\n<li>프로세스 수행은 CPU burst와 I/O burst의 반복</li>\n<li>I/O bounded : I/O burst가 더 긴 경우\n<ul>\n<li>I/O burst : I/O 대기시간(또는 사용시간)</li>\n</ul>\n</li>\n<li>compute-bounded : CPU burst가 더 긴 경우\n<ul>\n<li>CPU burst : CPU 사용시간</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"스케줄-단계빈도에-따라-구분\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84-%EB%8B%A8%EA%B3%84%EB%B9%88%EB%8F%84%EC%97%90-%EB%94%B0%EB%9D%BC-%EA%B5%AC%EB%B6%84\" aria-label=\"스케줄 단계빈도에 따라 구분 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌스케줄 단계(빈도에 따라 구분)</h2>\n<h3 id=\"-long-term-scheduling\" style=\"position:relative;\"><a href=\"#-long-term-scheduling\" aria-label=\" long term scheduling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 Long-term scheduling</h3>\n<ul>\n<li>job scheduling(시스템에 제출 할 job 결정)</li>\n<li>시스템내의 프로세스 수 조절</li>\n<li>I/O bounded와 computed bounded의 비율을 적절히 선택해야함</li>\n<li>시분할 시스템에서는 모든 작업을 시스템에 등록하므로 덜 중요</li>\n</ul>\n<h3 id=\"-mid-term-scheduling\" style=\"position:relative;\"><a href=\"#-mid-term-scheduling\" aria-label=\" mid term scheduling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 mid-term scheduling</h3>\n<ul>\n<li>메모리 할당 결정(suspend ready => ready로 가는 swapping)</li>\n</ul>\n<h3 id=\"-short-term-scheduling\" style=\"position:relative;\"><a href=\"#-short-term-scheduling\" aria-label=\" short term scheduling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 short-term scheduling</h3>\n<ul>\n<li>process scheduling(프로세서를 할당할 프로세스를 결정)</li>\n<li>가장 빈번하게 발생하므로 가장 중요하고 빨라야함</li>\n</ul>\n<h2 id=\"스케줄-방법\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84-%EB%B0%A9%EB%B2%95\" aria-label=\"스케줄 방법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌스케줄 방법</h2>\n<h3 id=\"-선점-스케줄링\" style=\"position:relative;\"><a href=\"#-%EC%84%A0%EC%A0%90-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\" aria-label=\" 선점 스케줄링 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 선점 스케줄링</h3>\n<ul>\n<li>preemptive scheduling</li>\n<li>타의에 의해 자원을 빼앗길 수 있다.\n<ul>\n<li>ex) 할당 시간 종료, 우선순위가 높은 프로세스 등장</li>\n</ul>\n</li>\n<li>응답성이 높아짐\n<ul>\n<li>시분할 시스템, real-time system에 적합</li>\n</ul>\n</li>\n<li>context switch overhead가 크다</li>\n</ul>\n<h3 id=\"-비선점-스케줄링\" style=\"position:relative;\"><a href=\"#-%EB%B9%84%EC%84%A0%EC%A0%90-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\" aria-label=\" 비선점 스케줄링 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 비선점 스케줄링</h3>\n<ul>\n<li>non-preemptive scheduling</li>\n<li>할당받을 자원을 스스로 반납할 때까지 사용</li>\n<li>응답성 낮음, context switch overhead 작음</li>\n</ul>\n<h3 id=\"-정적-우선순위\" style=\"position:relative;\"><a href=\"#-%EC%A0%95%EC%A0%81-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-label=\" 정적 우선순위 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 정적 우선순위</h3>\n<ul>\n<li>static priority</li>\n<li>프로세스 생성시 결정된 priority가 유지</li>\n<li>구현이 쉽고, over head가 적음</li>\n<li>환경 변화에 대응 어려움</li>\n</ul>\n<h3 id=\"-동적-우선순위\" style=\"position:relative;\"><a href=\"#-%EB%8F%99%EC%A0%81-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-label=\" 동적 우선순위 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 동적 우선순위</h3>\n<ul>\n<li>dynamic priorty</li>\n<li>프로세스의 상태 변화에 따라 priorty가 변경</li>\n<li>구현 복잡, priorty 재계산으로 overhead가 큼</li>\n<li>시스템 환경 변화에 대응</li>\n</ul>\n<p>📮출처 : <a href=\"https://www.youtube.com/watch?v=hzXVQIlSSos&#x26;list=PLBrGAFAIyf5rby7QylRc6JxU5lzQ9c4tN\" target=\"_blank\" rel=\"nofollow\">https://www.youtube.com/watch?v=hzXVQIlSSos&#x26;list=PLBrGAFAIyf5rby7QylRc6JxU5lzQ9c4tN</a></p>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"#%EB%8B%A4%EC%A4%91-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">📌다중 프로그래밍</a></li>\n<li><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81%EC%9D%98-%EB%AA%A9%EC%A0%81\">📌스케줄링의 목적</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9A%A9%EC%96%B4-%EC%A0%95%EC%9D%98\">💻용어 정의</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EA%B8%B0%EB%B2%95-%EC%84%A0%ED%83%9D-%EA%B8%B0%EC%A4%80\">📌스케줄링 기법 선택 기준</a></p>\n</li>\n<li>\n<p><a href=\"#io-bounded-%EC%99%80-compute-bounded%EB%9E%80\">❓I/O bounded 와 compute-bounded란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84-%EB%8B%A8%EA%B3%84%EB%B9%88%EB%8F%84%EC%97%90-%EB%94%B0%EB%9D%BC-%EA%B5%AC%EB%B6%84\">📌스케줄 단계(빈도에 따라 구분)</a></p>\n<ul>\n<li><a href=\"#-long-term-scheduling\">📖 Long-term scheduling</a></li>\n<li><a href=\"#-mid-term-scheduling\">📖 mid-term scheduling</a></li>\n<li><a href=\"#-short-term-scheduling\">📖 short-term scheduling</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84-%EB%B0%A9%EB%B2%95\">📌스케줄 방법</a></p>\n<ul>\n<li><a href=\"#-%EC%84%A0%EC%A0%90-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\">📖 선점 스케줄링</a></li>\n<li><a href=\"#-%EB%B9%84%EC%84%A0%EC%A0%90-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\">📖 비선점 스케줄링</a></li>\n<li><a href=\"#-%EC%A0%95%EC%A0%81-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\">📖 정적 우선순위</a></li>\n<li><a href=\"#-%EB%8F%99%EC%A0%81-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\">📖 동적 우선순위</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Process 스케줄링 1","date":"2023년 01월 21일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/운영체제/2023-01-22-Process-스케줄링-1/","previous":{"fields":{"slug":"/lecture/운영체제/2023-01-22-Thread-관리/"},"frontmatter":{"categories":["운영체제"],"title":"Thread 관리","date":"2023-01-22 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/운영체제/2023-01-23-Process-스케줄링-2/"},"frontmatter":{"categories":["운영체제"],"title":"Process 스케줄링 2","date":"2023-01-23 01:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}