{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/운영체제/2023-03-08-IO-System/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"io-system-hw\" style=\"position:relative;\"><a href=\"#io-system-hw\" aria-label=\"io system hw permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌I/O System (HW)</h2>\n<p><img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/d14bf6b7-02f1-4edc-b648-594834e2b845/image.png\" alt=\"\"></p>\n<h2 id=\"io-mechanisms\" style=\"position:relative;\"><a href=\"#io-mechanisms\" aria-label=\"io mechanisms permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌I/O Mechanisms</h2>\n<ul>\n<li>프로세서와 입출력장치 사이의 데이터 송수신 방법</li>\n</ul>\n<h3 id=\"processor-controlled-memory-access\" style=\"position:relative;\"><a href=\"#processor-controlled-memory-access\" aria-label=\"processor controlled memory access permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Processor controlled memory access</h3>\n<h3 id=\"️polling-기법\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fpolling-%EA%B8%B0%EB%B2%95\" aria-label=\"️polling 기법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️polling 기법</h3>\n<ul>\n<li>Processor가 주기적으로 I/O 장치의 상태 확인</li>\n<li>모든 I/O 장치를 순환하면서 전송 준비 및 전송 상태 등을 확인</li>\n<li>I/O 장치가 빠르고, 데이터 전송이 잦은 경우 효율적</li>\n<li>Processor의 부담이 큼</li>\n</ul>\n<h3 id=\"️interrupt-기법\" style=\"position:relative;\"><a href=\"#%EF%B8%8Finterrupt-%EA%B8%B0%EB%B2%95\" aria-label=\"️interrupt 기법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️Interrupt 기법</h3>\n<ul>\n<li>I/O 장치가 작업을 완료한 후, 자신의 상태를\r\nProcessor에게 전달</li>\n<li>Interrupt 발생 시, Processor는 데이터 전송 수행</li>\n<li>Pooling 대비 low overhead</li>\n<li>불규칙적인 요청 처리에 적합</li>\n<li>Interrupt handling overhead</li>\n</ul>\n<h3 id=\"direct-memory-access-dma\" style=\"position:relative;\"><a href=\"#direct-memory-access-dma\" aria-label=\"direct memory access dma permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Direct Memory Access (DMA)</h3>\n<ul>\n<li>I/O 장치와 Memory 사이의 데이터 전송을Processor 개입 없이 수행</li>\n<li>Processor는 데이터 전송의 시작/종료 만 관여\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/ddba5527-c020-4927-b8f5-3e4c98f02133/image.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"io-services-of-os\" style=\"position:relative;\"><a href=\"#io-services-of-os\" aria-label=\"io services of os permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌I/O Services of OS</h2>\n<ul>\n<li>I/O 성능을 높이기 위한 방법들</li>\n</ul>\n<h3 id=\"io-scheduling\" style=\"position:relative;\"><a href=\"#io-scheduling\" aria-label=\"io scheduling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖I/O Scheduling</h3>\n<ul>\n<li>입출력 요청에 대한 처리 순서 결정</li>\n<li>Process의 요구에 대한 공평한 처리</li>\n</ul>\n<h3 id=\"error-handling\" style=\"position:relative;\"><a href=\"#error-handling\" aria-label=\"error handling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Error handling</h3>\n<ul>\n<li>입출력 중 발생하는 오류 처리</li>\n</ul>\n<h3 id=\"buffering\" style=\"position:relative;\"><a href=\"#buffering\" aria-label=\"buffering permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Buffering</h3>\n<ul>\n<li>I/O 장치와 Program 사이에 전송되는 데이터를\r\nBuffer에 임시 저장</li>\n<li>전송 속도 (or 처리 단위) 차이 문제 해결</li>\n<li>100개 보내고 10개 받을 수 있으면 감당안되니 만든 중간 창고</li>\n<li>10개 보내고 100개 받을 수 있을 때에도 처음에 창고에 모아놨다가 100개씩 보내서 안끊기 연속되게 함</li>\n</ul>\n<h3 id=\"caching\" style=\"position:relative;\"><a href=\"#caching\" aria-label=\"caching permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Caching</h3>\n<ul>\n<li>자주 사용하는 데이터를 미리 복사해 둠</li>\n<li>Cache hit시 I/O를 생략 할 수 있음</li>\n</ul>\n<h3 id=\"spooling\" style=\"position:relative;\"><a href=\"#spooling\" aria-label=\"spooling permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Spooling</h3>\n<ul>\n<li>한 I/O 장치에 여러 Program이 요청을 보낼 시, 출력이 섞이지 않도록 하는 기법</li>\n<li>각 Program에 대응하는 disk file에 기록 (spooling)</li>\n<li>Spooling이 완료 되면, spool을 한번에 하나씩 I/O 장치로 전송</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#io-system-hw\">📌I/O System (HW)</a></p>\n</li>\n<li>\n<p><a href=\"#io-mechanisms\">📌I/O Mechanisms</a></p>\n<ul>\n<li><a href=\"#processor-controlled-memory-access\">📖Processor controlled memory access</a></li>\n<li><a href=\"#%EF%B8%8Fpolling-%EA%B8%B0%EB%B2%95\">✏️polling 기법</a></li>\n<li><a href=\"#%EF%B8%8Finterrupt-%EA%B8%B0%EB%B2%95\">✏️Interrupt 기법</a></li>\n<li><a href=\"#direct-memory-access-dma\">📖Direct Memory Access (DMA)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#io-services-of-os\">📌I/O Services of OS</a></p>\n<ul>\n<li><a href=\"#io-scheduling\">📖I/O Scheduling</a></li>\n<li><a href=\"#error-handling\">📖Error handling</a></li>\n<li><a href=\"#buffering\">📖Buffering</a></li>\n<li><a href=\"#caching\">📖Caching</a></li>\n<li><a href=\"#spooling\">📖Spooling</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"IO System","date":"2023년 03월 07일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/운영체제/2023-03-08-IO-System/","previous":{"fields":{"slug":"/lecture/운영체제/2023-03-07-Directory-Structure/"},"frontmatter":{"categories":["운영체제"],"title":"Directory Structure","date":"2023-03-07 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/운영체제/2023-03-08-File-System-Implement/"},"frontmatter":{"categories":["운영체제"],"title":"File System Implement","date":"2023-03-08 01:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}