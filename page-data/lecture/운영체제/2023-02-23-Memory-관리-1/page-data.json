{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/운영체제/2023-02-23-Memory-관리-1/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"메모리-종류\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A2%85%EB%A5%98\" aria-label=\"메모리 종류 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌메모리 종류</h2>\n<p><img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/b5beff23-15d3-4e24-8d0d-b15ee094074d/image.png\" alt=\"\"></p>\n<h2 id=\"메모리-계층-구조\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0\" aria-label=\"메모리 계층 구조 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌메모리 계층 구조</h2>\n<p><img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/1f486f55-db70-40f8-a34b-212c904894bf/image.png\" alt=\"\"></p>\n<ul>\n<li>block : 보조기억장치와 주기억 장치 사이의 데이터 전송 단위</li>\n<li>word : 주기억장치와 레지스터 사이의 데이터 전송 단위</li>\n</ul>\n<h2 id=\"address-binding\" style=\"position:relative;\"><a href=\"#address-binding\" aria-label=\"address binding permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌address binding</h2>\n<ul>\n<li>프로그램의 논리 주소를 실제 메모리의 물리 주소로 매핑하는 작업\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/b886a0da-da77-4ca6-9252-2a1883faed14/image.png\" alt=\"\"></li>\n<li>프로그램 프로세싱 과정</li>\n</ul>\n<h3 id=\"compile-time-binding\" style=\"position:relative;\"><a href=\"#compile-time-binding\" aria-label=\"compile time binding permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Compile time binding</h3>\n<ul>\n<li>프로세스가 메모리에 적재될 위치를 컴파일러가 알 수 있는 경우</li>\n<li>프로그램 전체가 메로리에 올라가야 한다</li>\n</ul>\n<h3 id=\"load-time-binding\" style=\"position:relative;\"><a href=\"#load-time-binding\" aria-label=\"load time binding permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖load time binding</h3>\n<ul>\n<li>메모리 적재 위치를 컴파일 시점에서 모르면, 대체 가능한 상대주소를 생성</li>\n<li>적재시점(load time)에 시작 주소를 반영하여 사용자 코드 상의 주소를 재설정</li>\n<li>프로그램 전체가 메모리에 올라가야 함</li>\n</ul>\n<h3 id=\"run-time-binding\" style=\"position:relative;\"><a href=\"#run-time-binding\" aria-label=\"run time binding permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖run time binding</h3>\n<ul>\n<li>address binding을 수행시간까지 연기\n<ul>\n<li>프로세스가 수행 도중 다른 메로리 위치로 이동 할 수 있음</li>\n</ul>\n</li>\n<li>HW 도움 필요</li>\n<li>대부분의 OS 사용</li>\n</ul>\n<h2 id=\"dynamic-loading\" style=\"position:relative;\"><a href=\"#dynamic-loading\" aria-label=\"dynamic loading permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌dynamic loading</h2>\n<ul>\n<li>모든 루틴(예 : <code class=\"language-text\">함수</code>)를 교체 가능한 형태로 하드디크스에 저장</li>\n<li>실제 호출 전까지는 루틴을 적재하지 않음</li>\n<li>즉, 하드에 저장해놨다가 호출되면 메모리에 적재 및 address binding하기</li>\n<li>메모리 공간 효율적 사용</li>\n</ul>\n<h2 id=\"swapping\" style=\"position:relative;\"><a href=\"#swapping\" aria-label=\"swapping permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌swapping</h2>\n<ul>\n<li>swap out : 프로세스 할당이 끝나고 수행 완료된 프로세스를 swap-device로</li>\n<li>swap in : 새롭게 시작하는 프로세르를 메모리에 적재\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/25bacf44-2221-4209-a585-83d8350caeeb/image.png\" alt=\"\"></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A2%85%EB%A5%98\">📌메모리 종류</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0\">📌메모리 계층 구조</a></p>\n</li>\n<li>\n<p><a href=\"#address-binding\">📌address binding</a></p>\n<ul>\n<li><a href=\"#compile-time-binding\">📖Compile time binding</a></li>\n<li><a href=\"#load-time-binding\">📖load time binding</a></li>\n<li><a href=\"#run-time-binding\">📖run time binding</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dynamic-loading\">📌dynamic loading</a></p>\n</li>\n<li>\n<p><a href=\"#swapping\">📌swapping</a></p>\n</li>\n</ul>","frontmatter":{"title":"Memory 관리 1","date":"2023년 02월 22일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/운영체제/2023-02-23-Memory-관리-1/","previous":{"fields":{"slug":"/lecture/운영체제/2023-02-23-Memory-관리-2/"},"frontmatter":{"categories":["운영체제"],"title":"Memory 관리 2","date":"2023-02-23 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/운영체제/2023-02-24-Virtual-Memory-2/"},"frontmatter":{"categories":["운영체제"],"title":"Virtual Memory 2","date":"2023-02-24 01:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}