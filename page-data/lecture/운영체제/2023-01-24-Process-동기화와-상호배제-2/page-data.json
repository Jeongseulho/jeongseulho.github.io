{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/운영체제/2023-01-24-Process-동기화와-상호배제-2/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"mutual-exclusion-sw-solutions\" style=\"position:relative;\"><a href=\"#mutual-exclusion-sw-solutions\" aria-label=\"mutual exclusion sw solutions permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌mutual exclusion SW solutions</h2>\n<h3 id=\"dekkers-algorithm\" style=\"position:relative;\"><a href=\"#dekkers-algorithm\" aria-label=\"dekkers algorithm permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Dekker’s algorithm</h3>\n<ul>\n<li>프로세스가 2개일때 ME의 조건을 만족하는 최초의 알고리즘\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/31ce73b5-7211-40c7-8745-759abb1d0f0f/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"petersons-algorithm\" style=\"position:relative;\"><a href=\"#petersons-algorithm\" aria-label=\"petersons algorithm permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Peterson’s algorithm</h3>\n<ul>\n<li>마찬가지로 프로세스 2개의 ME를 보장하는 비교적 간단한 알고리즘\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/4de0baab-4b1e-4196-afc7-74cde73aae60/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"dijkstras-algorithm\" style=\"position:relative;\"><a href=\"#dijkstras-algorithm\" aria-label=\"dijkstras algorithm permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Dijkstra’s algorithm</h3>\n<ul>\n<li>dijkstra 알고리즘의 flag[]값에 따른 의미 - 값이 1일때 idle : 프로세스가 임계 지역 진입을 시도하고 있지 않음 - 값이 2일때 want-in : 프로세스의 임계 지역 진입 시도 1단계임 - 값이 3일때 in-CS : 프로세스의 임계 지역 진입 시도 2단계 및 임계 지역 내임<br>\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/d3103d92-cf41-426b-90aa-70793d14817c/image.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"sw-solution-문제점\" style=\"position:relative;\"><a href=\"#sw-solution-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"sw solution 문제점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚨SW solution 문제점</h2>\n<ul>\n<li>속도가 느림</li>\n<li>구현이 복잡</li>\n<li>ME primitive 실행중 preemption 발생가능(machine instructor가 아니므로)\n<ul>\n<li>공유 데이터 수정중 인터럽트 억제로 해결가능 단, 이또한 overhead</li>\n</ul>\n</li>\n<li>busy waiting : 대기하면서 루프문을 계속 도는 것(비효율적임)</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#mutual-exclusion-sw-solutions\">📌mutual exclusion SW solutions</a></p>\n<ul>\n<li><a href=\"#dekkers-algorithm\">📖Dekker’s algorithm</a></li>\n<li><a href=\"#petersons-algorithm\">📖Peterson’s algorithm</a></li>\n<li><a href=\"#dijkstras-algorithm\">📖Dijkstra’s algorithm</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#sw-solution-%EB%AC%B8%EC%A0%9C%EC%A0%90\">🚨SW solution 문제점</a></p>\n</li>\n</ul>","frontmatter":{"title":"Process 동기화와 상호배제 2","date":"2023년 01월 23일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/운영체제/2023-01-24-Process-동기화와-상호배제-2/","previous":{"fields":{"slug":"/lecture/운영체제/2023-01-23-Process-스케줄링-2/"},"frontmatter":{"categories":["운영체제"],"title":"Process 스케줄링 2","date":"2023-01-23 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/운영체제/2023-01-24-Process-동기화와-상호배제-1/"},"frontmatter":{"categories":["운영체제"],"title":"Process 동기화와 상호배제 1","date":"2023-01-24 01:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}