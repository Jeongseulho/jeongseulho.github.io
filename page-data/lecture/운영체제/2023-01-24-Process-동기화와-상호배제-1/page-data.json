{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/운영체제/2023-01-24-Process-동기화와-상호배제-1/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"process-synchronization동기화\" style=\"position:relative;\"><a href=\"#process-synchronization%EB%8F%99%EA%B8%B0%ED%99%94\" aria-label=\"process synchronization동기화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌process synchronization(동기화)</h2>\n<ul>\n<li>프로세스들이 서로 동작을 맞추는 것</li>\n<li>프로세스들이 서로 정보를 공유하는 것</li>\n</ul>\n<h2 id=\"왜-동기화-해야하는가\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EB%8F%99%EA%B8%B0%ED%99%94-%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"왜 동기화 해야하는가 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❓왜 동기화 해야하는가</h2>\n<ul>\n<li>asynchronous(비동기적) : 프로세스들이 서로 모름</li>\n<li>concurrent(병행적) : 여러개의 프로세스들이 동시에 시스템에 존재</li>\n</ul>\n<p>병행 수행중인 비동기적 프로세스들이 공유 자원에 동시에 접근하면 문제가 생김</p>\n<h1 id=\"용어정리\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\" aria-label=\"용어정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💻용어정리</h1>\n<ul>\n<li>shared data(critical data) : 여러 프로세스들이 공유하는 데이터</li>\n<li>ciritical section(임계영역) : 공유 데이터를 접근하는 코드 영역</li>\n<li>mutual exclusion(상호배제) : 둘 이상의 프로세스가 동시에 critical section에 진입하는 것을 막는 것</li>\n<li>machine instruction(기계어 명령)\n<ul>\n<li>원자성(가장 작은 명령 단위)</li>\n<li>분리 불가능</li>\n<li>한 기계어의 명령 실행 도중에는 인터럽트를 받지 않는다</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mutual-exclusion\" style=\"position:relative;\"><a href=\"#mutual-exclusion\" aria-label=\"mutual exclusion permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌mutual exclusion</h2>\n<ul>\n<li>\n<p>mutual exclusion이 없는 경우\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/ad0f7824-3a1c-4337-8d43-22d1311f425e/image.png\" alt=\"\">\r\n다음과 같이 결과 값이 다르게 나올 수 있음</p>\n</li>\n<li>\n<p>mutual exclusion 개념\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/f2a32bff-4b35-42e6-8cd4-b3164af82c6b/image.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"mutual-exclusion-methods\" style=\"position:relative;\"><a href=\"#mutual-exclusion-methods\" aria-label=\"mutual exclusion methods permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖mutual exclusion methods</h3>\n<ol>\n<li>enterCS() primitive\n<ul>\n<li>critical section 진입전 검사</li>\n<li>다른 프로세스가 해당 critical section에 있는지 확인 = 노크하기</li>\n</ul>\n</li>\n<li>exitCS() primitive\n<ul>\n<li>critical section 벗어날때 후처리</li>\n<li>critical section을 벗어남을 공지</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"requirements-for-me-primitives\" style=\"position:relative;\"><a href=\"#requirements-for-me-primitives\" aria-label=\"requirements for me primitives permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖requirements for ME primitives</h3>\n<ol>\n<li>ME(상호배제) : CS(critical section)에 프로세스가 있으면 다른 프로세스의 진입을 금지한다</li>\n<li>progress : cs안에 있는 프로세스 외의 다른 프로세스가 cs 진입 금지를 주도할 수 없다. 즉, CS안에 프로세스가 없으면 들어갈 수 있어야한다</li>\n<li>bounded waiting : 프로세스의 cs진입은 유한시간 내에 허용된다. 즉, 언젠가는 CS에 진입해야한다, 무한 대기현상이 없도록 해야한다</li>\n</ol>\n<p>3가지 조건을 만족하는 ME primitives 알고리즘들(다음 포스팅 계속…)</p>\n<p>📮출처 : <a href=\"https://www.youtube.com/watch?v=hzXVQIlSSos&#x26;list=PLBrGAFAIyf5rby7QylRc6JxU5lzQ9c4tN\" target=\"_blank\" rel=\"nofollow\">https://www.youtube.com/watch?v=hzXVQIlSSos&#x26;list=PLBrGAFAIyf5rby7QylRc6JxU5lzQ9c4tN</a></p>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"#process-synchronization%EB%8F%99%EA%B8%B0%ED%99%94\">📌process synchronization(동기화)</a></li>\n<li><a href=\"#%EC%99%9C-%EB%8F%99%EA%B8%B0%ED%99%94-%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94%EA%B0%80\">❓왜 동기화 해야하는가</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\">💻용어정리</a></p>\n<ul>\n<li>\n<p><a href=\"#mutual-exclusion\">📌mutual exclusion</a></p>\n<ul>\n<li><a href=\"#mutual-exclusion-methods\">📖mutual exclusion methods</a></li>\n<li><a href=\"#requirements-for-me-primitives\">📖requirements for ME primitives</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Process 동기화와 상호배제 1","date":"2023년 01월 23일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/운영체제/2023-01-24-Process-동기화와-상호배제-1/","previous":{"fields":{"slug":"/lecture/운영체제/2023-01-24-Process-동기화와-상호배제-2/"},"frontmatter":{"categories":["운영체제"],"title":"Process 동기화와 상호배제 2","date":"2023-01-24 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/운영체제/2023-02-15-Process-동기화와-상호배제-3/"},"frontmatter":{"categories":["운영체제"],"title":"Process 동기화와 상호배제 3","date":"2023-02-15 01:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}