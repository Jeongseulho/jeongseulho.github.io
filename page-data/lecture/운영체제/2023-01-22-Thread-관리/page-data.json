{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/운영체제/2023-01-22-Thread-관리/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"프로세스와-스레드의-관계\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EA%B4%80%EA%B3%84\" aria-label=\"프로세스와 스레드의 관계 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌프로세스와 스레드의 관계</h2>\n<p>프로세스가 하는 일은 2가지로</p>\n<ol>\n<li>자원을 할당받기</li>\n<li>제어하기\r\n이 2가지 중 제어만을 담당하기 위해 분리한 것 = 스레드\r\n하나의 프로세스 안에 복수의 스레드가 있다\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/aeed2881-99b9-481a-94d8-1efa8ee46968/image.png\" alt=\"\"></li>\n</ol>\n<p>또한 하나의 프로세스의 여러 스레드들은 같은 주소 공간을 공유한다.\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/33303ac5-1b37-4ec1-8105-25cffd2762b8/image.png\" alt=\"\"></p>\n<h2 id=\"스레드란\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EB%9E%80\" aria-label=\"스레드란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌스레드란?</h2>\n<ul>\n<li>Light Weight Process(LWP) : 자원과 제어중 제어만을 담당하는 가벼운 프로세스</li>\n<li>프로세스 활용, 실행의 기본 단위</li>\n<li>구성요소\n<ul>\n<li>thread ID</li>\n<li>Register set(PC, SP 등)</li>\n<li>stack(local data등)</li>\n</ul>\n</li>\n<li>제어요소를 스레드마다 보유</li>\n<li>데이터 및 자원, 메모리를 같은 프로세스의 여러 스레드끼리 공유</li>\n<li>전통적인 프로세스(이전 까지 설명한 프로세스는) 단일 스레드 프로세스를 기준으로 한 것</li>\n</ul>\n<h2 id=\"스레드의-장점\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"스레드의 장점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌스레드의 장점</h2>\n<ul>\n<li>사용자 응답성 : 일부 스레드의 처리가 지연되어도 다른 스레드는 작업 처리 가능</li>\n<li>자원 공유 : 자원을 공유하면 커널의 개입을 피하여 효율성 증가\n<ul>\n<li>커널의 개입이 많으면 비효율적임(context switching 최소화)</li>\n</ul>\n</li>\n<li>경제성</li>\n<li>멀티 프로세서 : 병렬처리 가능</li>\n</ul>\n<h2 id=\"스레드의-구현\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EA%B5%AC%ED%98%84\" aria-label=\"스레드의 구현 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌스레드의 구현</h2>\n<h3 id=\"-사용자-수준-스레드n1-모델\" style=\"position:relative;\"><a href=\"#-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%88%98%EC%A4%80-%EC%8A%A4%EB%A0%88%EB%93%9Cn1-%EB%AA%A8%EB%8D%B8\" aria-label=\" 사용자 수준 스레드n1 모델 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 사용자 수준 스레드(n:1 모델)</h3>\n<ul>\n<li>사용자 영역의 스레드 라이브러리로 구현된다\n<ul>\n<li>스레드의 생성, 스케줄링 등</li>\n<li>java thread api, win32 threads 등</li>\n</ul>\n</li>\n<li>커널의 스레드가 여러개인지 모른다</li>\n<li>커널의 관리를 받지 않아서 부하가 적고 이식성이 높음</li>\n<li>단, 하나의 스레드가 block상태가 되면 모든 스레드가 대기\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/6af75eb7-1dd6-4b41-9a22-964338761283/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"-커널-수준-스레드11-모델\" style=\"position:relative;\"><a href=\"#-%EC%BB%A4%EB%84%90-%EC%88%98%EC%A4%80-%EC%8A%A4%EB%A0%88%EB%93%9C11-%EB%AA%A8%EB%8D%B8\" aria-label=\" 커널 수준 스레드11 모델 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 커널 수준 스레드(1:1 모델)</h3>\n<ul>\n<li>커널, OS에서 직접 관리하는 스레드</li>\n<li>커널에서 스레드의 관리하여 부하가 크다</li>\n<li>커널이 각 스레드를 개별적 관리하여 병행 수행가능(다른 스레드가 block되어도 다른 스레드는 수행)\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/db6aabde-539c-4cdf-bf95-19cf7b7d918b/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"-혼합형-스레드nm-모델\" style=\"position:relative;\"><a href=\"#-%ED%98%BC%ED%95%A9%ED%98%95-%EC%8A%A4%EB%A0%88%EB%93%9Cnm-%EB%AA%A8%EB%8D%B8\" aria-label=\" 혼합형 스레드nm 모델 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 혼합형 스레드(n:m 모델)</h3>\n<ul>\n<li>n개의 사용자 수준 스레드, m개의 커널 스레드(n > m)</li>\n<li>사용자가 원하는 만큼의 스레드 사용 가능</li>\n<li>병행 처리 가능\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/b2614942-7c31-4588-a268-d30b465d0cce/image.png\" alt=\"\"></li>\n</ul>\n<p>📮출처 : <a href=\"https://www.youtube.com/watch?v=hzXVQIlSSos&#x26;list=PLBrGAFAIyf5rby7QylRc6JxU5lzQ9c4tN\" target=\"_blank\" rel=\"nofollow\">https://www.youtube.com/watch?v=hzXVQIlSSos&#x26;list=PLBrGAFAIyf5rby7QylRc6JxU5lzQ9c4tN</a></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EA%B4%80%EA%B3%84\">📌프로세스와 스레드의 관계</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EB%9E%80\">📌스레드란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%9E%A5%EC%A0%90\">📌스레드의 장점</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EA%B5%AC%ED%98%84\">📌스레드의 구현</a></p>\n<ul>\n<li><a href=\"#-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%88%98%EC%A4%80-%EC%8A%A4%EB%A0%88%EB%93%9Cn1-%EB%AA%A8%EB%8D%B8\">📖 사용자 수준 스레드(n:1 모델)</a></li>\n<li><a href=\"#-%EC%BB%A4%EB%84%90-%EC%88%98%EC%A4%80-%EC%8A%A4%EB%A0%88%EB%93%9C11-%EB%AA%A8%EB%8D%B8\">📖 커널 수준 스레드(1:1 모델)</a></li>\n<li><a href=\"#-%ED%98%BC%ED%95%A9%ED%98%95-%EC%8A%A4%EB%A0%88%EB%93%9Cnm-%EB%AA%A8%EB%8D%B8\">📖 혼합형 스레드(n:m 모델)</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Thread 관리","date":"2023년 01월 21일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/운영체제/2023-01-22-Thread-관리/","previous":{"fields":{"slug":"/lecture/운영체제/2023-01-18-Process-관리-2/"},"frontmatter":{"categories":["운영체제"],"title":"Process 관리 2","date":"2023-01-18 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/운영체제/2023-01-22-Process-스케줄링-1/"},"frontmatter":{"categories":["운영체제"],"title":"Process 스케줄링 1","date":"2023-01-22 01:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}