{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/운영체제/2023-03-02-Virtual-Memory-관리-3/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"replacement-strategies\" style=\"position:relative;\"><a href=\"#replacement-strategies\" aria-label=\"replacement strategies permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌replacement strategies</h2>\n<ul>\n<li>메모리에 프로세스 block이 진입해야 하는데 자리가 없다면 메모리에 있는 block들중 어떤 것을 교체해야할까?</li>\n</ul>\n<h3 id=\"fixed-allocation에서\" style=\"position:relative;\"><a href=\"#fixed-allocation%EC%97%90%EC%84%9C\" aria-label=\"fixed allocation에서 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖fixed allocation에서</h3>\n<h3 id=\"️min-algorithm\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fmin-algorithm\" aria-label=\"️min algorithm permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️min algorithm</h3>\n<ul>\n<li>page fault frequency를 최소화 하는 알고리즘</li>\n<li>앞으로 가장 오랫동안 참조되지 않을 page를 교체</li>\n<li>실현 불가 기법</li>\n<li>교체 기법의 성능평가 도구로 사용\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/ebcc7613-c1eb-4ada-bd8b-a9ad698071fa/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"️random-algorithm\" style=\"position:relative;\"><a href=\"#%EF%B8%8Frandom-algorithm\" aria-label=\"️random algorithm permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️random algorithm</h3>\n<ul>\n<li>무작위로 교체할 page 선택</li>\n<li>low overhead</li>\n</ul>\n<h3 id=\"️fifo-algorithm\" style=\"position:relative;\"><a href=\"#%EF%B8%8Ffifo-algorithm\" aria-label=\"️fifo algorithm permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️FIFO algorithm</h3>\n<ul>\n<li>가장 오래된 page를 교체</li>\n<li>page가 들어온 시간 기록 필요</li>\n<li>자주 사용되는 page가 교체될 가능성이 높음(locality에 대한 고려가 없음)</li>\n<li>FIFO anomaly 발생\n<ul>\n<li>FIFO 알고리즘은 더많은 page frame을 할당 받음에도 불구하고 page fault가 증가할 수 있음(더 많은 메모리주었는데 오히려 성능이 안좋아짐)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/5fce53bc-50c3-4ee0-ac06-cdc5ccb21e3e/image.png\" alt=\"\"></p>\n<h3 id=\"️least-recently-used-algorithm\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fleast-recently-used-algorithm\" aria-label=\"️least recently used algorithm permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️Least Recently Used algorithm</h3>\n<ul>\n<li>가장 오랫동안 사용하지 않은 page 교체(locality 고려)</li>\n<li>page가 참조될때 마다 시간을 기록해야함(over head)</li>\n<li>locality에 기반을 둔 교체 기법</li>\n<li>min algorithm에 근접한 성능, 실제로 많이 사용</li>\n<li>단, loop 실행에 필요한 크기보다 작은수의 page frame이 할당 된 경우 page fault 급격히 증가\n<ul>\n<li>ex) loop를 위한 |ref.string| = 4, 할당된 page frame 3개이면 첫 3번 page fault 이후 4번를 참조할때, 1번 out 4번 in, loop이므로 1번 다시 참조해야하므로 또 page fault 발생 2번 out 1번 in, 계속 page fault</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"️least-frequently-used-algorithm\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fleast-frequently-used-algorithm\" aria-label=\"️least frequently used algorithm permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️Least Frequently Used algorithm</h3>\n<ul>\n<li>가장 참조 횟수가 적은 page 교체</li>\n<li>page 참조마다 참조횟수 누적 필요</li>\n<li>LRU대비 낮은 over head</li>\n<li>단, 최근 적재된 참조될 가능성 높은 page가 교체 될 수 있음\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/92f5eb71-a66e-45c1-9b4a-34fcdd3c16c5/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"️not-used-recently-algorithm\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fnot-used-recently-algorithm\" aria-label=\"️not used recently algorithm permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️Not Used Recently algorithm</h3>\n<ul>\n<li>LRU보다 적은 overhead로 비슷한 성능 달성 목적</li>\n<li>bit vector 사용\n<ul>\n<li>reference bit vector(r), update bit vector(m)</li>\n<li>reference bit는 주기적으로 0초기화 됨</li>\n</ul>\n</li>\n<li>교체 우선 순위(최근 참조 안된 것 우선 + write back 안해도 되는 것 우선)\n<ol>\n<li>(r, m) = (0, 0)</li>\n<li>(r, m) = (0, 1)</li>\n<li>(r, m) = (1, 0)</li>\n<li>(r, m) = (1, 1)</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"️clock-algorithm\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fclock-algorithm\" aria-label=\"️clock algorithm permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️clock algorithm</h3>\n<ul>\n<li>reference bit 사용 단, 주기적인 0초기화가 없음</li>\n<li>page frame들을 순차적으로 가리키는 포인터를 사용하여 교체할 page 선택\n<ul>\n<li>현재 가르키는 page의 r 확인,</li>\n<li>r = 0이면 교체</li>\n<li>r = 1이면 0으로 초기화 이후 다음 이동(한바퀴 돌면 다음번엔 바꿀려고)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/d7429ae8-1608-4076-8b47-a17d3e41def5/image.png\" alt=\"\"></p>\n<h3 id=\"️second-chance-algorithm\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fsecond-chance-algorithm\" aria-label=\"️second chance algorithm permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️Second Chance Algorithm</h3>\n<ul>\n<li>clock algorithm에 update bit도 추가적으로 고려하는 버전</li>\n<li>교체 우선 순위(최근 참조 안된 것 우선 + write back 안해도 되는 것 우선) 1. (r, m) = (0, 0) : 교체 page 결정 2. (r, m) = (0, 1) : (0, 0)으로 고쳐 쓰고 이동 + write-back list에 추가 3. (r, m) = (1, 0) : (0, 0)으로 고쳐 쓰고 이동 4. (r, m) = (1, 1) : (0, 1)으로 고쳐 쓰고 이동\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/2df86528-489f-4bba-8b81-fc14c817736b/image.png\" alt=\"\"></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#replacement-strategies\">📌replacement strategies</a></p>\n<ul>\n<li><a href=\"#fixed-allocation%EC%97%90%EC%84%9C\">📖fixed allocation에서</a></li>\n<li><a href=\"#%EF%B8%8Fmin-algorithm\">✏️min algorithm</a></li>\n<li><a href=\"#%EF%B8%8Frandom-algorithm\">✏️random algorithm</a></li>\n<li><a href=\"#%EF%B8%8Ffifo-algorithm\">✏️FIFO algorithm</a></li>\n<li><a href=\"#%EF%B8%8Fleast-recently-used-algorithm\">✏️Least Recently Used algorithm</a></li>\n<li><a href=\"#%EF%B8%8Fleast-frequently-used-algorithm\">✏️Least Frequently Used algorithm</a></li>\n<li><a href=\"#%EF%B8%8Fnot-used-recently-algorithm\">✏️Not Used Recently algorithm</a></li>\n<li><a href=\"#%EF%B8%8Fclock-algorithm\">✏️clock algorithm</a></li>\n<li><a href=\"#%EF%B8%8Fsecond-chance-algorithm\">✏️Second Chance Algorithm</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Virtual Memory 관리 3","date":"2023년 03월 01일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/운영체제/2023-03-02-Virtual-Memory-관리-3/","previous":{"fields":{"slug":"/lecture/운영체제/2023-02-28-Virtual-Memory-관리-1/"},"frontmatter":{"categories":["운영체제"],"title":"Virtual Memory 관리 1","date":"2023-02-28 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/운영체제/2023-03-03-Virtual-Memory-관리-4/"},"frontmatter":{"categories":["운영체제"],"title":"Virtual Memory 관리 4","date":"2023-03-03 01:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}