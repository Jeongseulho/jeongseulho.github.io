{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/소프트웨어 공학/2023-04-26-아키텍처-설계/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"소프트웨어-아키텍처란sa\" style=\"position:relative;\"><a href=\"#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EB%9E%80sa\" aria-label=\"소프트웨어 아키텍처란sa permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌소프트웨어 아키텍처란(SA)</h2>\n<ul>\n<li>소프트웨어 시스템의 청사진 : 구조, 동작, 상호작용, 비기능적 속성 등</li>\n<li>또다른 정의로는 설계시 나오는 다양한 의사결정들의 집합</li>\n</ul>\n<h3 id=\"계층-아키텍처\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%B8%B5-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\" aria-label=\"계층 아키텍처 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖계층 아키텍처</h3>\n<ul>\n<li>계층 아키텍처 예시\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/dd4dd05a-633b-4596-a61a-0ffda927e6ba/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"컴포넌트-아키텍처\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\" aria-label=\"컴포넌트 아키텍처 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖컴포넌트 아키텍처</h3>\n<ul>\n<li>컴포넌트 : 독립적으로 수행가능한 모듈 또는 클래스 or 아키텍처의 한 부품(부분)</li>\n<li>아래 예시에서는 4가지 기본 컴포넌트들을 기반으로 설계\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/f6867c24-5153-4de8-b689-d236252eeef7/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"아키텍처-특징\" style=\"position:relative;\"><a href=\"#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%ED%8A%B9%EC%A7%95\" aria-label=\"아키텍처 특징 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖아키텍처 특징</h3>\n<ul>\n<li>아키텍처는 중요한 컴포넌트들을 강조하고 컴포넌트들 간의 관계, 네트워크를 표현해야 한다</li>\n<li>아키텍처는 실제 개발단계, 평가단계, 유지보수 등 에서 도움을 줄 수 있다</li>\n<li>아키텍처는 비기능적 요구사항에도 큰 영향을 미친다</li>\n</ul>\n<h4 id=\"아키텍처가-비기능적-요구사항에-미치는-영향-예시\" style=\"position:relative;\"><a href=\"#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EA%B0%80-%EB%B9%84%EA%B8%B0%EB%8A%A5%EC%A0%81-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%EC%97%90-%EB%AF%B8%EC%B9%98%EB%8A%94-%EC%98%81%ED%96%A5-%EC%98%88%EC%8B%9C\" aria-label=\"아키텍처가 비기능적 요구사항에 미치는 영향 예시 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아키텍처가 비기능적 요구사항에 미치는 영향 예시</h4>\n<blockquote>\n<p>써드파티 컴포넌트는 다른곳에서 가져온 컴포넌트 수정 불가능, C1 ~ C4는 직접 만든 컴포넌트들\r\n써드파티 컴포넌트들 다른 컴포넌트로 교체하려한다.\r\n이때, 왼쪽 SA는 C1 ~ C4를 모두 수정해야함 / 오른쪽은 래퍼라는 중간 미들웨어를 두어서 래퍼만 수정하면 됨\r\n아키텍처가 비기능적 요구사항(유지보수 관점)에 미치는 영향</p>\n</blockquote>\n<p><img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/9f8a726a-e615-4807-a0d1-500ecb6ea5ef/image.png\" alt=\"\"></p>\n<h2 id=\"아키텍처-설계-방향\" style=\"position:relative;\"><a href=\"#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%84%A4%EA%B3%84-%EB%B0%A9%ED%96%A5\" aria-label=\"아키텍처 설계 방향 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌아키텍처 설계 방향</h2>\n<ul>\n<li>\n<p>성능 향상 관점 : 성능에 큰 영향을 미치는 기능(DB 등)을 하나로 모은다, 모듈간의 communication을 최소화</p>\n</li>\n<li>\n<p>보안 관점 : 계층 아키텍처를 사용하고 중요한 정보를 inner layers에 위치하게한다</p>\n</li>\n<li>\n<p>안전성(자동차 소프트웨어 등) 관점 : 안전성에 영향을 미치는 기능들을 하나로 모아서 테스트 및 검증의 코스트를 줄인다</p>\n</li>\n<li>\n<p>availability(안정적이며 지속적으로 동작하는 능력) : redundant components(중복 구성요소)“를 구현하여 “fault tolerance mechanisms(장애 허용 메커니즘)“을 구현</p>\n<ul>\n<li>redundant components : 발생하는 장애를 대비하기 위해 여러 개의 독립적인 구성요소를 추가로 구현하는 것, 이러한 구성요소는 서로 대체 가능하며, 하나의 구성요소에 문제가 발생하더라도 다른 구성요소가 문제를 대신 처리할 수 있도록</li>\n<li>fault tolerance mechanisms : 시스템이 예상치 못한 장애 상황에서도 동작을 지속할 수 있도록 하는 방법</li>\n</ul>\n</li>\n<li>\n<p>유지보수성 : 작게 나눠라(모듈화)</p>\n</li>\n</ul>\n<h3 id=\"아키텍처-개선-예시\" style=\"position:relative;\"><a href=\"#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B0%9C%EC%84%A0-%EC%98%88%EC%8B%9C\" aria-label=\"아키텍처 개선 예시 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖아키텍처 개선 예시</h3>\n<ul>\n<li>초기(이미지를 업로드하고 다운로드하는 소프트웨어)\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/df4261cc-ad5d-4dd4-9979-a953a85f13b2/image.png\" alt=\"\"></li>\n<li>업로드 모듈과 다운로드 모듈을 분리\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/09f68a06-6f58-4180-bfc7-987a0e21fe06/image.png\" alt=\"\"></li>\n<li>redundant components 구현</li>\n<li>지역 별로 다른 업로드/다운로드 모듈을 사용(어느 한 모듈 고장나도 대체 가능, 물리적으로 가까운 곳에 서버를 두어 빠른 반응)</li>\n<li>지역별로 DB 또는 백업 DB 하나더 사용(위의 이유와 동일)\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/35fbcc95-41d7-4bc6-bf6f-c35487733634/image.png\" alt=\"\"></li>\n<li>요청의 종류마다 다른 서버, DB를 사용(유료 고객은 빠르고 원활한 서버, 무료 고객은 최소한의 서버 제공 등)\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/a78d960b-9045-4c1d-af3e-f46a96992353/image.png\" alt=\"\"></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EB%9E%80sa\">📌소프트웨어 아키텍처란(SA)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EA%B3%84%EC%B8%B5-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\">📖계층 아키텍처</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\">📖컴포넌트 아키텍처</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%ED%8A%B9%EC%A7%95\">📖아키텍처 특징</a></p>\n<ul>\n<li><a href=\"#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EA%B0%80-%EB%B9%84%EA%B8%B0%EB%8A%A5%EC%A0%81-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%EC%97%90-%EB%AF%B8%EC%B9%98%EB%8A%94-%EC%98%81%ED%96%A5-%EC%98%88%EC%8B%9C\">아키텍처가 비기능적 요구사항에 미치는 영향 예시</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%84%A4%EA%B3%84-%EB%B0%A9%ED%96%A5\">📌아키텍처 설계 방향</a></p>\n<ul>\n<li><a href=\"#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B0%9C%EC%84%A0-%EC%98%88%EC%8B%9C\">📖아키텍처 개선 예시</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"아키텍처 설계","date":"2023년 04월 25일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/소프트웨어 공학/2023-04-26-아키텍처-설계/","previous":{"fields":{"slug":"/lecture/소프트웨어 공학/2023-04-25-UML-다이어그램-분류/"},"frontmatter":{"categories":["소프트웨어 공학"],"title":"UML 다이어그램 분류","date":"2023-04-25 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/소프트웨어 공학/2023-04-27-아키텍처-표현/"},"frontmatter":{"categories":["소프트웨어 공학"],"title":"아키텍처 표현","date":"2023-04-27 01:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}