{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/소프트웨어 공학/2023-05-10-블랙,화이트-박스-테스팅/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"블랙-박스-테스트\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%9E%99-%EB%B0%95%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"블랙 박스 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌블랙 박스 테스트</h2>\n<p><img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/64c8b965-bfa8-4a36-a582-e432be5684b6/image.png\" alt=\"\"></p>\n<ul>\n<li>소프트웨어의 명세에 기반하여 테스트(코드를 직접 보지 않음)</li>\n<li>명세서의 기능들을 동작하도록 테스트하는 것이 목적</li>\n<li>명세에 없는 세부적인 오류는 찾기 힘듬</li>\n</ul>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖장점</h3>\n<ul>\n<li>도메인에 집중할 수 있다</li>\n<li>코드가 필요 없다, test case 디자인을 미리 할 수 있다</li>\n<li>명세에서의 논리적 오류를 찾을 수 있다</li>\n<li>유닛 테스트나 통합 테스트 모두 적용 가능</li>\n</ul>\n<h3 id=\"과정\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%95\" aria-label=\"과정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖과정</h3>\n<ol>\n<li>\n<p>테스트 가능한 특징들을 뽑아낸다\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/bef9f67e-b6c8-4767-8cb6-1ba7e1b4beb1/image.png\" alt=\"\"></p>\n</li>\n<li>\n<p>해당 특징들의 입력들을 선별\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/14acfa51-60ce-4491-8b95-703e238ecbfa/image.png\" alt=\"\"></p>\n</li>\n</ol>\n<ul>\n<li>입력 요소가 3가지에 각각 정상 3가지/비정상3가지/예외2가지 총 조합의 수 = 18가지</li>\n</ul>\n<ol start=\"3\">\n<li>입력들의 조합으로 test case 명세서를 만든다\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/c446b097-13b0-4bf3-b9a9-207ca5f9d162/image.png\" alt=\"\"></li>\n</ol>\n<ul>\n<li>18가지 조합의 수 test case</li>\n</ul>\n<ol start=\"4\">\n<li>명세를 기반으로 구체적인 test case 만든다\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/d86910c9-6ad7-42b0-a865-4a7ef1a552ca/image.png\" alt=\"\"></li>\n</ol>\n<h3 id=\"createselect-test-case\" style=\"position:relative;\"><a href=\"#createselect-test-case\" aria-label=\"createselect test case permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖create/select test case</h3>\n<ul>\n<li>Equivalence class partitioning : test case에 그룹을 나누고 각 그룹의 하나의 케이스만 뽑아낸다, <code class=\"language-text\">example) 1~100의 input 테스트시 1~50의 그룹1 / 51~100그룹2로 나누고 각 그룹의 대표하는 한가지 case만 추출하여 실제 테스트</code></li>\n<li>Boundary value analysis : 위에서 정한 그룹의 경계 데이터(1, 49, 52, 99 등)만 뽑아서 테스트</li>\n<li>Model-based testing : state diagram에서 모든 state를 커버하도록 테스트하는 것(이것도 그룹을 나누어서 대표 case를 하나 선별하는 것과 비슷한 느낌)</li>\n</ul>\n<h3 id=\"test-case-조합-사이트\" style=\"position:relative;\"><a href=\"#test-case-%EC%A1%B0%ED%95%A9-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"test case 조합 사이트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖test case 조합 사이트</h3>\n<ul>\n<li>굉장히 다양한 조합 경우의 수의 케이스를 생성, 관리하는 툴</li>\n<li><a href=\"http://www.pairwise.org\" target=\"_blank\" rel=\"nofollow\">www.pairwise.org</a> / PICT / TSL generator</li>\n</ul>\n<h2 id=\"화이트-박스-테스트\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%9D%B4%ED%8A%B8-%EB%B0%95%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"화이트 박스 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌화이트 박스 테스트</h2>\n<ul>\n<li>코드를 직접 보고 코드 기반으로 테스트</li>\n<li>코드에 구현된 것들을 동작하도록 테스트하는 것이 목적</li>\n</ul>\n<h3 id=\"장점-1\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90-1\" aria-label=\"장점 1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖장점</h3>\n<ul>\n<li>test suites(테스트 그룹)를 비교가능 : A테스트그룹이 B테스트그룹을 포함하면서 비용이 비슷하다면? A테스트그룹만 선택함, 이러한 비교가 가능</li>\n<li>객관적으로 테스트 결과를 확인할 수 있고 자동화 테스트가 가능</li>\n</ul>\n<h3 id=\"control-flow-graph\" style=\"position:relative;\"><a href=\"#control-flow-graph\" aria-label=\"control flow graph permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖control flow graph</h3>\n<ul>\n<li>프로그램 제어 흐름을 그래프로 그려서 이 그래프를 커버하도록 테스트 케이스를 설계하는 방법이 존재</li>\n<li>basic path : 시작노드부터 끝노드까지 순회하는 각 경로를 지칭</li>\n<li>cyclomatic complexity : 독립적인 basic path의 개수로 계산하는 복잡도</li>\n<li>모든 basic path를 커버하는 테스트 케이스를 설계하는 방법\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/76993256-f401-469a-9055-48d88f64c3f9/image.png\" alt=\"\"></li>\n<li>4가지 basic path가 존재</li>\n</ul>\n<h3 id=\"test-coverage\" style=\"position:relative;\"><a href=\"#test-coverage\" aria-label=\"test coverage permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Test Coverage</h3>\n<ul>\n<li>basic path coverage : test suites(tc1, tc2, tc3 …)가 basic path를 모두 cover할 때</li>\n<li>all path coverage : test suites(tc1, tc2, tc3 …)가 모든 path 조합을 cover할 때</li>\n<li>statement, branch, condition, multiple condition, MC/DC 등등 존재</li>\n<li>이러한 test suites들을 서로 포함 관계로 비교가 가능한 것이 특징</li>\n</ul>\n<h4 id=\"️statement-coverage\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fstatement-coverage\" aria-label=\"️statement coverage permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✒️statement Coverage</h4>\n<ul>\n<li>모든 코드를 적어도 한번씩 실행하여 cover하는 test suit</li>\n<li>밑 예에서 TC2는 statement coverage\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/2c6186bd-e306-43db-927c-834583fabb16/image.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"️branch-coverage\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fbranch-coverage\" aria-label=\"️branch coverage permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✒️branch Coverage</h4>\n<ul>\n<li>모든 branch(edge)를 cover하는 테스트 범위</li>\n<li>밑의 예에서 F-F branch를 커버 + T-T branch를 커버하는 test suit가 branch Coverage\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/baa5ffdc-4755-4a0a-a301-c077fa69ba74/image.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"️condition-coverage\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fcondition-coverage\" aria-label=\"️condition coverage permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✒️condition Coverage</h4>\n<ul>\n<li>작은 단위의 조건문 까지 모두 cover하는 test suit</li>\n<li>각 조건문의 T,F를 모두 테스트\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/76ee3d23-c7e0-413f-b78e-fe9fe77a6636/image.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"️branch-vs-condition\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fbranch-vs-condition\" aria-label=\"️branch vs condition permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✒️branch vs condition</h4>\n<p><img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/2188b502-2ca7-4ca5-8f28-401984e8a2cd/image.png\" alt=\"\"></p>\n<h4 id=\"️multiple-condition-coverage\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fmultiple-condition-coverage\" aria-label=\"️multiple condition coverage permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✒️multiple-condition coverage</h4>\n<ul>\n<li>목표 : condition과 branch를 모두 만족하는 test case 디자인하기 방법1</li>\n<li>각 조건에대한 모든 경우의 수 test suit, 조건이 <code class=\"language-text\">n</code>개 있으면 <code class=\"language-text\">2^n</code>만큼의 경우의 수가 생김\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/3008d6a4-94d2-4c09-a0d6-79072f94c011/image.png\" alt=\"\"></li>\n<li>너무 많은 test case</li>\n</ul>\n<h4 id=\"️mcdc-coverage\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fmcdc-coverage\" aria-label=\"️mcdc coverage permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✒️MC/DC coverage</h4>\n<ul>\n<li>modified condition, decision coverage</li>\n<li>목표 : condition과 branch를 모두 만족하는 test case 디자인하기 방법2\n<blockquote>\n<p>MC/DC pair의 개념\r\nif(A and B and C) { … } 코드 존재,\r\nTC1 : (A,B,C) = (T,T,T) -> outcome=T\r\nTC2 : (A,B,C) = (T,T,F) -> outcome=F\r\nC만 바꿨는데 결과가 바뀌었으므로, C가 결과에 영향을 미침\r\nTC1 와 TC2를 MC/DC pair라 지칭한다</p>\n</blockquote>\n</li>\n<li>MC/DC coverage는 이러한 MC/DC pair들을 모두 모아둔 것</li>\n<li>위에서 C에대해서 MC/DC pair인데 A에대해서, B에대해서 모두 test case를 디자인하면 그것을 MC/DC coverage test suite라 한다\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/ab3ce3eb-85ed-4b7b-98a1-e188b0521be5/image.png\" alt=\"\"></li>\n<li><code class=\"language-text\">TC1-TC2</code> / <code class=\"language-text\">TC1-TC3</code> / <code class=\"language-text\">TC1-TC5</code> 라는 MC/DC pair로 MC/DC coverage 만족 최종 test suit = {TC1, TC2, TC3, TC5}</li>\n</ul>\n<h3 id=\"test-coverage-포함-관계-비교\" style=\"position:relative;\"><a href=\"#test-coverage-%ED%8F%AC%ED%95%A8-%EA%B4%80%EA%B3%84-%EB%B9%84%EA%B5%90\" aria-label=\"test coverage 포함 관계 비교 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Test Coverage 포함 관계 비교</h3>\n<ul>\n<li>큰 원의 test suit를 테스트 했다면, 그에 포함되는 내부의 test suit를 테스트 할 필요는 없음\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/eefd7641-0723-4b1b-974b-f5381a15fb10/image.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"test-trend\" style=\"position:relative;\"><a href=\"#test-trend\" aria-label=\"test trend permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌test trend</h2>\n<ul>\n<li>개발자가 직접 본인의 코드를 test하는게 일반적</li>\n<li>TDD 시행</li>\n<li>테스트 자동화</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%B8%94%EB%9E%99-%EB%B0%95%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌블랙 박스 테스트</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">📖장점</a></li>\n<li><a href=\"#%EA%B3%BC%EC%A0%95\">📖과정</a></li>\n<li><a href=\"#createselect-test-case\">📖create/select test case</a></li>\n<li><a href=\"#test-case-%EC%A1%B0%ED%95%A9-%EC%82%AC%EC%9D%B4%ED%8A%B8\">📖test case 조합 사이트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%99%94%EC%9D%B4%ED%8A%B8-%EB%B0%95%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌화이트 박스 테스트</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%9E%A5%EC%A0%90-1\">📖장점</a></p>\n</li>\n<li>\n<p><a href=\"#control-flow-graph\">📖control flow graph</a></p>\n</li>\n<li>\n<p><a href=\"#test-coverage\">📖Test Coverage</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8Fstatement-coverage\">✒️statement Coverage</a></li>\n<li><a href=\"#%EF%B8%8Fbranch-coverage\">✒️branch Coverage</a></li>\n<li><a href=\"#%EF%B8%8Fcondition-coverage\">✒️condition Coverage</a></li>\n<li><a href=\"#%EF%B8%8Fbranch-vs-condition\">✒️branch vs condition</a></li>\n<li><a href=\"#%EF%B8%8Fmultiple-condition-coverage\">✒️multiple-condition coverage</a></li>\n<li><a href=\"#%EF%B8%8Fmcdc-coverage\">✒️MC/DC coverage</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#test-coverage-%ED%8F%AC%ED%95%A8-%EA%B4%80%EA%B3%84-%EB%B9%84%EA%B5%90\">📖Test Coverage 포함 관계 비교</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#test-trend\">📌test trend</a></p>\n</li>\n</ul>","frontmatter":{"title":"블랙, 화이트 박스 테스팅","date":"2023년 05월 09일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/소프트웨어 공학/2023-05-10-블랙,화이트-박스-테스팅/","previous":{"fields":{"slug":"/lecture/소프트웨어 공학/2023-05-10-소프트웨어-테스트/"},"frontmatter":{"categories":["소프트웨어 공학"],"title":"소프트웨어 테스트","date":"2023-05-10 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/프론트엔드 테스트/2023-12-22-FE-테스트-개요/"},"frontmatter":{"categories":["프론트엔드 테스트"],"title":"FE 테스트 개요","date":"2023-12-22 01:00:00 +0900","tags":["FE","Test"]}}}},"staticQueryHashes":[],"slicesMap":{}}