{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/소프트웨어 공학/2023-05-01-SOLID-객체지향/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"single-responsibility-principlesrp\" style=\"position:relative;\"><a href=\"#single-responsibility-principlesrp\" aria-label=\"single responsibility principlesrp permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌single Responsibility principle(SRP)</h2>\n<ul>\n<li>단일 책임 원리</li>\n<li>각 모든 모듈 or 클래스들은 하나의 기능 or 역할을 가져야 한다</li>\n</ul>\n<h3 id=\"bad-case1\" style=\"position:relative;\"><a href=\"#bad-case1\" aria-label=\"bad case1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙅bad case1</h3>\n<ul>\n<li>하나의 모듈에 여러 기능이 있는 경우\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/e5c3c8af-0df6-41a3-865e-675a8343b48b/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"bad-case2\" style=\"position:relative;\"><a href=\"#bad-case2\" aria-label=\"bad case2 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙅bad case2</h3>\n<ul>\n<li>하나의 기능이 여러 모듈에 걸쳐 있는 경우</li>\n<li>참고) transaction : DB에서 자주사용하는 용어로 어떤 로직이 수행되다가 제대로 마치지 못하였으면 처음 아무 로직도 수행되지 않은 상태로 되돌아가는 것(애매하게 중간상태를 방지)\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/cb103af3-26f6-456f-ba6b-0fae178439a3/image.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"open-closed-princpleocp\" style=\"position:relative;\"><a href=\"#open-closed-princpleocp\" aria-label=\"open closed princpleocp permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌open closed princple(OCP)</h2>\n<ul>\n<li>개방 폐쇄 원리</li>\n<li>원래의 코드는 그대로 유지한채 확장가능 해야한다</li>\n</ul>\n<h3 id=\"good-case\" style=\"position:relative;\"><a href=\"#good-case\" aria-label=\"good case permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍good case</h3>\n<ul>\n<li>해당 구조에 있는 코드들을 그대로 유지한채 A3를 추가(확장)가능해야 한다\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/a5a2e3d0-cc15-4166-b913-a0af362716ed/image.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"liskov-subtitution-principlelsp\" style=\"position:relative;\"><a href=\"#liskov-subtitution-principlelsp\" aria-label=\"liskov subtitution principlelsp permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌liskov subtitution principle(LSP)</h2>\n<ul>\n<li>리스코프 치환 원리</li>\n<li>기존의 부모클래스의 명세(기능, 변수)를 유지하면서 부모 객체는 해당 자식 객체로 대체가 가능해야 한다</li>\n<li>부모클래스의 기능들이 자식클래스에서 그대로 동작해야한다(확장은 가능 하지만 수정은 안됨)</li>\n</ul>\n<h2 id=\"inteface-segregation-principleisp\" style=\"position:relative;\"><a href=\"#inteface-segregation-principleisp\" aria-label=\"inteface segregation principleisp permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌inteface segregation principle(ISP)</h2>\n<ul>\n<li>인터페이스 분리 원리</li>\n<li>다양한 고객에게 제공되는 인터페이스는 범용적인 인터페이스를 두기보다 분리하라</li>\n</ul>\n<h3 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖example</h3>\n<ul>\n<li>복합기에 복사, 팩스, 프린터등 범용 인터페이스 존재</li>\n<li>각각의 기능을 담당하는 인터페이스를 만들어 분리\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/c3c24223-e0b3-45e2-88f6-b97a051b9503/image.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"dependency-inversion-principledip\" style=\"position:relative;\"><a href=\"#dependency-inversion-principledip\" aria-label=\"dependency inversion principledip permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌dependency inversion principle(DIP)</h2>\n<ul>\n<li>의존 역전 원리</li>\n<li>구체적인것에 의존하지 말고 추상적인 것에 의존하라</li>\n<li>구체적인 것은 자주 변경 되고 추상적인 것은 잘 변경 되지 않기 때문에</li>\n</ul>\n<h3 id=\"good-case-1\" style=\"position:relative;\"><a href=\"#good-case-1\" aria-label=\"good case 1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍good case</h3>\n<ul>\n<li>아이가 직접 장난감 종류에 접근하는 것이 아닌 장난감이라는 추상적이고 애매한 것에 의존하도록\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/160a6d71-5325-4238-86bf-404edca88ac8/image.png\" alt=\"\"></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#single-responsibility-principlesrp\">📌single Responsibility principle(SRP)</a></p>\n<ul>\n<li><a href=\"#bad-case1\">🙅bad case1</a></li>\n<li><a href=\"#bad-case2\">🙅bad case2</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#open-closed-princpleocp\">📌open closed princple(OCP)</a></p>\n<ul>\n<li><a href=\"#good-case\">👍good case</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#liskov-subtitution-principlelsp\">📌liskov subtitution principle(LSP)</a></p>\n</li>\n<li>\n<p><a href=\"#inteface-segregation-principleisp\">📌inteface segregation principle(ISP)</a></p>\n<ul>\n<li><a href=\"#example\">📖example</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dependency-inversion-principledip\">📌dependency inversion principle(DIP)</a></p>\n<ul>\n<li><a href=\"#good-case-1\">👍good case</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"SOLID 객체지향","date":"2023년 04월 30일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/소프트웨어 공학/2023-05-01-SOLID-객체지향/","previous":{"fields":{"slug":"/lecture/소프트웨어 공학/2023-05-01-상세-설계-원리/"},"frontmatter":{"categories":["소프트웨어 공학"],"title":"상세 설계 원리","date":"2023-05-01 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/소프트웨어 공학/2023-05-03-디자인-패턴/"},"frontmatter":{"categories":["소프트웨어 공학"],"title":"디자인 패턴","date":"2023-05-03 01:00:00 +0900","tags":["CS","디자인 패턴"]}}}},"staticQueryHashes":[],"slicesMap":{}}