{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/소프트웨어 공학/2023-04-27-아키텍처-유형/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"layered-architecture\" style=\"position:relative;\"><a href=\"#layered-architecture\" aria-label=\"layered architecture permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌Layered architecture</h2>\n<ul>\n<li>계층적인 아키텍처\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/e97013fb-6d22-488b-b635-42a05facd7f7/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"layered-architecture-특징\" style=\"position:relative;\"><a href=\"#layered-architecture-%ED%8A%B9%EC%A7%95\" aria-label=\"layered architecture 특징 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Layered architecture 특징</h3>\n<ul>\n<li>\n<p>각 계층은 그 위 계층에 서버스를 제공한다</p>\n</li>\n<li>\n<p>이미 있는 시스템 위에 새로운 기능을 쌓을 때 사용</p>\n</li>\n<li>\n<p>여러 팀이 각 기능 계층을 하나씩 맡아 개발할 때 사용</p>\n</li>\n<li>\n<p>보안성을 강화해야할 때(보안해야할 계층을 아래에 두어서 보안강화)</p>\n</li>\n<li>\n<p>인터페이스를 동일하게 유지하면 하나의 계층을 새로운 구현으로 만들 수 있다</p>\n<ul>\n<li>밑의 예에서 A운영체제의 상위 계층들을 인터페이스를 유지한채로(연결 선 5개) B운영체제(B운영체제에서 해당 인터페이스들을 지원한다면)로 그대로 옮겨서 사용 가능(새롭게 만든 구현)\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/4ad302e8-1b06-4f5f-81cd-3dd8271bd28b/image.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>\n<p>각 계층에 중복되는 기능을 추가하여 신뢰성 높임(여러번 검사해서 보안성 강화느낌)</p>\n</li>\n<li>\n<p>계층적으로 명백히 구분하는 작업이 어렵다</p>\n</li>\n<li>\n<p>2계층이상 건너뛰어 인터페이스 연결할 수 없어서 성능문제 발생 가능</p>\n</li>\n</ul>\n<h2 id=\"client-server-architecture\" style=\"position:relative;\"><a href=\"#client-server-architecture\" aria-label=\"client server architecture permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌Client-server architecture</h2>\n<ul>\n<li>여러 각 서버에 역할을 나누어 클라이언트는 필요한 서버들만 조합하여 사용하는 아키텍처\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/2952e651-2518-42a9-b19f-c1c9b5565d8f/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"client-server-architecture-특징\" style=\"position:relative;\"><a href=\"#client-server-architecture-%ED%8A%B9%EC%A7%95\" aria-label=\"client server architecture 특징 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Client-server architecture 특징</h3>\n<ul>\n<li>여러 지역에서 공유 DB를 사용할 때 사용</li>\n<li>시스템 부하가 가변적일때 사용</li>\n<li>네트워크로 서버들을 분산 배치할 수 있다</li>\n<li>DDOS공격, 서버 다운에 취약</li>\n<li>성능이 컴퓨터 시스템 뿐만 아니라 네트워크에도 의존</li>\n<li>여러 서비스들이 서로 의존관계(연동)가 있을때 관리 문제 발생</li>\n</ul>\n<h2 id=\"model-view-controllermvc\" style=\"position:relative;\"><a href=\"#model-view-controllermvc\" aria-label=\"model view controllermvc permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌Model-View-Controller(MVC)</h2>\n<ul>\n<li>Model : 비즈니스 로직 수행 및 DB관리</li>\n<li>View : 사용자에게 보여지는 부분</li>\n<li>Controller : Model과 View를 조합하여 사용자 입력을 처리\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/5b07fe70-6d3b-4b4d-93b8-824f1546381c/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"mvc-특징\" style=\"position:relative;\"><a href=\"#mvc-%ED%8A%B9%EC%A7%95\" aria-label=\"mvc 특징 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖MVC 특징</h3>\n<ul>\n<li>데이터를 보여주는 것과 처리하는 것을 분리</li>\n<li>데이터를 여러방식으로 보여주고 싶을 때 사용(한가지 데이터(Model)로 표, 원형차트, 막대차트(View) 등으로 보여주고 싶음 => Model은 그대로 View만 변경)</li>\n</ul>\n<h2 id=\"이벤트-주도-아키텍처\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\" aria-label=\"이벤트 주도 아키텍처 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌이벤트 주도 아키텍처</h2>\n<ul>\n<li>sub-system1이 sub-system2를 사용하고자 한다면 핸들러에게 텍스트를 전달(이벤트 발생), sub-system2이 동작</li>\n<li>이벤트를 이용하여 서로 상호작용\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/c9422bdd-7d6f-4dee-9db7-e0ad449b6466/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"이벤트-주도-아키텍처-특징\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%ED%8A%B9%EC%A7%95\" aria-label=\"이벤트 주도 아키텍처 특징 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖이벤트 주도 아키텍처 특징</h3>\n<ul>\n<li>네트워크 상에 서로 다른 컴퓨터에 분산된 컴포넌트를 통합</li>\n<li>시스템 추가, 수정, 변경등이 쉽다</li>\n<li>한 시스템에서 발생한 이벤트가 언제 처리될지 모름</li>\n</ul>\n<h2 id=\"repository-아키텍처\" style=\"position:relative;\"><a href=\"#repository-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\" aria-label=\"repository 아키텍처 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌Repository 아키텍처</h2>\n<ul>\n<li>공유 Repository를 두고 서로 상호작용</li>\n<li>각 언어 에디터에서 코드 작성 Repository에 공유 => code generator는 공유 repo에 코드를 컴파일\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/6a7df211-15e0-447c-83aa-0af5ba244ba4/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"repository-아키텍처-특징\" style=\"position:relative;\"><a href=\"#repository-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%ED%8A%B9%EC%A7%95\" aria-label=\"repository 아키텍처 특징 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Repository 아키텍처 특징</h3>\n<ul>\n<li>새로운 데이터를 중앙 repo에 추가하면 어떤 액션이나 도구를 실행하게 되는 시스템에서 사용</li>\n<li>각 컴포넌트들은 독립적</li>\n<li>중앙 repo의 데이터를 일관성있게 관리</li>\n<li>중앙 repo에 문제가 있으면 전체 시스템에 영향을 준다</li>\n<li>속도측면에서 느릴 수 있다.</li>\n</ul>\n<h2 id=\"pipe-and-filter-아키텍처\" style=\"position:relative;\"><a href=\"#pipe-and-filter-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\" aria-label=\"pipe and filter 아키텍처 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌Pipe and Filter 아키텍처</h2>\n<ul>\n<li>아래는 실제코드를 컴퓨터가 이해하는 문자로 변환하고 실행하는 예시\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/ca9f0c71-a777-43dc-b4bc-230780b59b8e/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"pipe-and-filter-아키텍처-특징\" style=\"position:relative;\"><a href=\"#pipe-and-filter-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%ED%8A%B9%EC%A7%95\" aria-label=\"pipe and filter 아키텍처 특징 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖Pipe and Filter 아키텍처 특징</h3>\n<ul>\n<li>한 컴포넌트가 출력한 데이터를 다른 컴포넌트의 입력이 됨</li>\n<li>이해하기 쉽고, 재사용이 쉬움</li>\n<li>변환, 수정이 쉽다</li>\n<li>서로 인접한 컴포넌트들 간의 데이터 형식을 미리 정해두어야함</li>\n<li>아웃풋을 인풋으로 하기위한 자료구조 변환이 생기는 부하 늘어남</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#layered-architecture\">📌Layered architecture</a></p>\n<ul>\n<li><a href=\"#layered-architecture-%ED%8A%B9%EC%A7%95\">📖Layered architecture 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#client-server-architecture\">📌Client-server architecture</a></p>\n<ul>\n<li><a href=\"#client-server-architecture-%ED%8A%B9%EC%A7%95\">📖Client-server architecture 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#model-view-controllermvc\">📌Model-View-Controller(MVC)</a></p>\n<ul>\n<li><a href=\"#mvc-%ED%8A%B9%EC%A7%95\">📖MVC 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\">📌이벤트 주도 아키텍처</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%ED%8A%B9%EC%A7%95\">📖이벤트 주도 아키텍처 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#repository-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\">📌Repository 아키텍처</a></p>\n<ul>\n<li><a href=\"#repository-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%ED%8A%B9%EC%A7%95\">📖Repository 아키텍처 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#pipe-and-filter-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\">📌Pipe and Filter 아키텍처</a></p>\n<ul>\n<li><a href=\"#pipe-and-filter-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%ED%8A%B9%EC%A7%95\">📖Pipe and Filter 아키텍처 특징</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"아키텍처 유형","date":"2023년 04월 26일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/소프트웨어 공학/2023-04-27-아키텍처-유형/","previous":{"fields":{"slug":"/lecture/소프트웨어 공학/2023-04-27-아키텍처-표현/"},"frontmatter":{"categories":["소프트웨어 공학"],"title":"아키텍처 표현","date":"2023-04-27 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/소프트웨어 공학/2023-05-01-상세-설계-원리/"},"frontmatter":{"categories":["소프트웨어 공학"],"title":"상세 설계 원리","date":"2023-05-01 01:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}