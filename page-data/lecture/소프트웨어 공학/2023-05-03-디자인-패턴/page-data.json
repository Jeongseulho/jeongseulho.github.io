{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/소프트웨어 공학/2023-05-03-디자인-패턴/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"디자인-패턴이란\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80\" aria-label=\"디자인 패턴이란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌디자인 패턴이란?</h2>\n<ul>\n<li>코딩을 하면서 나타나는 문제들을 ~한 패턴으로 코딩하면 해결하더라</li>\n<li>이러한 문제해결 패턴들을 모아둔 것</li>\n</ul>\n<h2 id=\"creational-patterns\" style=\"position:relative;\"><a href=\"#creational-patterns\" aria-label=\"creational patterns permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌creational patterns</h2>\n<ul>\n<li>객체 생성시 어떻게 클래스의 구성할 것 인가?(불필요한 의존성 등)에대한 패턴</li>\n</ul>\n<h3 id=\"factory-method-pattern\" style=\"position:relative;\"><a href=\"#factory-method-pattern\" aria-label=\"factory method pattern permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖factory method pattern</h3>\n<ul>\n<li>객체와 해당 객체의 클래스 사이의 의존성을 낮추는 패턴</li>\n<li>객체를 생성하는데 구체적인 클래스의 이름을 사용하지 않으면서 확장 및 수정을 용이하게\n<blockquote>\n<p>why? : <code class=\"language-text\">new className(arg1)</code>으로 객체를 만들면 객체와 클래스간의 강한 의존성이 생김 className를 수정하여 파라미터가 1개 더 늘어났다고 가정하면 해당 클래스의 객체를 사용하던 사람의 코드도 바뀌어야함</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/88460bf9-ad47-491d-9086-ddf1fd6c0c68/image.png\" alt=\"\"></p>\n<blockquote>\n<p><code class=\"language-text\">AnOperation()</code>메소드에서는 <code class=\"language-text\">FactoryMethod()</code>라는 본인 클래스내의 추상 메소드(비어져있는 메소드)를 사용하여<code class=\"language-text\">ConcreteProduct</code>의 객체를 만든다, 이때 <code class=\"language-text\">FactoryMethod()</code>는 자식 클래스에서 오버라이딩 되었으므로 동적 바인딩으로 <code class=\"language-text\">ConcreteCreator</code>의 오버라이딩된 <code class=\"language-text\">FactoryMethod()</code>가 호출 됨</p>\n</blockquote>\n<ul>\n<li><code class=\"language-text\">AnOperation()</code>을 사용하는 유저는 어떤 클래스의 객체를 만드는지 구체적으로 모름</li>\n</ul>\n<h3 id=\"abstract-factory-pattern\" style=\"position:relative;\"><a href=\"#abstract-factory-pattern\" aria-label=\"abstract factory pattern permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖abstract factory pattern</h3>\n<ul>\n<li>논리적으로 연관있는 객체를 한번에 만드는데 이러한 연관된 객체들을 만들어내는 팩토리(클래스)를 그룹핑하겠다\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/46e5a4cf-45e5-408d-9fe3-867ca5dbeb66/image.png\" alt=\"\"></li>\n<li>최상위 클래스인 House공장은 추상 메소드를 2개 갖고 있음</li>\n<li>ELBF공장은 LightBulb와 EIBBBlind 객체를 만드는 팩토리(그룹 또는 클래스)</li>\n<li>Luxmater공장은 LuxmaterBulb와 LuxmaterBlind를 만드는 팩토리(그룹 또는 클래스)</li>\n</ul>\n<h3 id=\"singleton-pattern\" style=\"position:relative;\"><a href=\"#singleton-pattern\" aria-label=\"singleton pattern permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖singleton pattern</h3>\n<ul>\n<li>프로그램 실행중에 클래스의 인스턴스가 1개만 유지 되도록 하는 패턴</li>\n<li>1개의 인스턴스만 실행이 있어도 가능한 경우에 메모리를 최소화 하기 위해 사용</li>\n</ul>\n<h2 id=\"structual-patterns\" style=\"position:relative;\"><a href=\"#structual-patterns\" aria-label=\"structual patterns permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌structual patterns</h2>\n<ul>\n<li>큰 구조의 프로젝트에서 클래스를 어떻게 구성하고 구조화할 것 인가?에대한 패턴</li>\n</ul>\n<h3 id=\"adapter-pattern\" style=\"position:relative;\"><a href=\"#adapter-pattern\" aria-label=\"adapter pattern permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖adapter pattern</h3>\n<ul>\n<li>인터페이스 호환성 문제로 같이 쓸 수 없는 클래스들을 연결하여 쓸 수 있도록 하는 패턴\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/250d051c-c1cc-4830-94b1-3936e7c92047/image.png\" alt=\"\">\n<blockquote>\n<p>클라이언트는 <code class=\"language-text\">Request()</code> 인터페이스로된 클래스만 사용가능, <code class=\"language-text\">SpecificRequest()</code>라는 인터페이스를 가진 다른 클래스 사용 불가능</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/8a03effe-3970-4888-b22d-ad64b8125a46/image.png\" alt=\"\"></p>\n<blockquote>\n<p><code class=\"language-text\">Adapter</code>라는 클래스를 만들어 <code class=\"language-text\">Request()</code> 인터페이스를 그대로 사용하면서도 <code class=\"language-text\">SpecificRequest()</code> 인터페이스도 사용할 수 있게 만듬</p>\n</blockquote>\n<h3 id=\"composite-pattern\" style=\"position:relative;\"><a href=\"#composite-pattern\" aria-label=\"composite pattern permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖composite pattern</h3>\n<ul>\n<li>다른 클래스간의 공통된 인터페이스들을 모아서 마치 1가지의 클래스인 것 처럼 사용하도록 하는 패턴\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/a28d6afb-3cc0-42f4-ab0c-f733f7fe2533/image.png\" alt=\"\">\n<blockquote>\n<p><code class=\"language-text\">Computer</code>라는 composite은 각각의 부품에 getPrice를 사용하여 부품 총합 getPrice를 인터페이스를 구현한다</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"behavioral-patterns\" style=\"position:relative;\"><a href=\"#behavioral-patterns\" aria-label=\"behavioral patterns permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌behavioral patterns</h2>\n<ul>\n<li>각 객체가 맡은 역할들을 어떻게 배치할 것 인가?에대한 패턴</li>\n</ul>\n<h3 id=\"iterator-pattern\" style=\"position:relative;\"><a href=\"#iterator-pattern\" aria-label=\"iterator pattern permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖iterator pattern</h3>\n<ul>\n<li>객체 내부의 요소들을 하나씩 꺼내어 어떤 동작을 하려 할 때, 사용자는 내부가 어떤 구조로 되어있든 같은 인터페이스를 이용하여 해당 동작을 수행하도록 하는 패턴</li>\n<li>내부구조가 바뀌어도 사용자가 사용할 코드(인터페이스에대한)는 바뀌지 않도록 하는 것</li>\n</ul>\n<h3 id=\"observer-pattern\" style=\"position:relative;\"><a href=\"#observer-pattern\" aria-label=\"observer pattern permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖observer pattern</h3>\n<ul>\n<li>어떤 Subject 클래스에 Observer 객체들을 추가, Subject 객체에 어떤 이벤트가 일어나면 Observer에게 알려주고 Observer는 받은 알림에 따라 어떤 동작을 하는 패턴\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/4e4c2ac8-017c-4fc0-b5ae-df82f45431d0/image.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"state-pattern\" style=\"position:relative;\"><a href=\"#state-pattern\" aria-label=\"state pattern permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖state pattern</h3>\n<ul>\n<li>state에따라 객체의 행동이 달라지도록 설계하는 패턴</li>\n<li>state가 추가되어도 기존의 코드를 최대한 유지한채로 수정할 수 있다.\r\n<img src=\"https://velog.velcdn.com/images/wjdtmfgh/post/0c3c00e7-b500-491f-84e6-7ea776bfd136/image.png\" alt=\"\"></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80\">📌디자인 패턴이란?</a></p>\n</li>\n<li>\n<p><a href=\"#creational-patterns\">📌creational patterns</a></p>\n<ul>\n<li><a href=\"#factory-method-pattern\">📖factory method pattern</a></li>\n<li><a href=\"#abstract-factory-pattern\">📖abstract factory pattern</a></li>\n<li><a href=\"#singleton-pattern\">📖singleton pattern</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#structual-patterns\">📌structual patterns</a></p>\n<ul>\n<li><a href=\"#adapter-pattern\">📖adapter pattern</a></li>\n<li><a href=\"#composite-pattern\">📖composite pattern</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#behavioral-patterns\">📌behavioral patterns</a></p>\n<ul>\n<li><a href=\"#iterator-pattern\">📖iterator pattern</a></li>\n<li><a href=\"#observer-pattern\">📖observer pattern</a></li>\n<li><a href=\"#state-pattern\">📖state pattern</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"디자인 패턴","date":"2023년 05월 02일","tags":["CS","디자인 패턴"]}}}]}},"pageContext":{"slug":"/lecture/소프트웨어 공학/2023-05-03-디자인-패턴/","previous":{"fields":{"slug":"/lecture/소프트웨어 공학/2023-05-01-SOLID-객체지향/"},"frontmatter":{"categories":["소프트웨어 공학"],"title":"SOLID 객체지향","date":"2023-05-01 01:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/소프트웨어 공학/2023-05-09-코드-리팩토링/"},"frontmatter":{"categories":["소프트웨어 공학"],"title":"코드 리팩토링","date":"2023-05-09 01:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}