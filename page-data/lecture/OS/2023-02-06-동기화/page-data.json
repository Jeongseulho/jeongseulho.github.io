{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/OS/2023-02-06-동기화/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1 id=\"경쟁-조건\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%EC%9F%81-%EC%A1%B0%EA%B1%B4\" aria-label=\"경쟁 조건 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경쟁 조건</h1>\n<ul>\n<li>여러 프로세스/스레드가 동시에 같은 데이터를 조작할 때, 접근 순서에 따라 결과가 달라지는 상황</li>\n</ul>\n<blockquote>\n<p>DB의 트랙잭션과 같은 원리<br>\n두 스레드에서 어떤 변수의 값을 +=1 하는 경우</p>\n</blockquote>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"36116069325168710000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`public class Counter {\r\n    private int count = 0;\r\n\r\n    public void increment() {\r\n        count++;\r\n    }\r\n}\r\n\r\nfor(int i = 0; i < 10; i++) {\r\n    counter.increment(); // 각 루프문의 다른 스레드에서 실행된다면?\r\n}`, `36116069325168710000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 각 루프문의 다른 스레드에서 실행된다면?</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"동기화\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94\" aria-label=\"동기화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기화</h1>\n<ul>\n<li>여러 프로세스/스레드를 동시에 실행해도 공유 데이터의 일관성을 유지하는 것</li>\n</ul>\n<h1 id=\"임계영역critical-section\" style=\"position:relative;\"><a href=\"#%EC%9E%84%EA%B3%84%EC%98%81%EC%97%ADcritical-section\" aria-label=\"임계영역critical section permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>임계영역(Critical Section)</h1>\n<ul>\n<li>공유 데이터 일관성을 위해 하나의 프로세스/스레드만 진입하여 실행 가능한 영역</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"60678181246922810000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`   // 이 메소드를 임계영역으로 설정하여 해결\r\n   public void increment() {\r\n        count++;\r\n    }`, `60678181246922810000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">   <span class=\"token comment\">// 이 메소드를 임계영역으로 설정하여 해결</span>\r\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"임계-영역-동작-과정\" style=\"position:relative;\"><a href=\"#%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-label=\"임계 영역 동작 과정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>임계 영역 동작 과정</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"96286394510599860000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`do {\r\n    entry section // 진입 전 가능한지 확인\r\n    critical section // 임계영역 실행\r\n    exit section // 나가기\r\n    remainder section // 나머지 코드\r\n} while(true);`, `96286394510599860000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\r\n    entry section <span class=\"token comment\">// 진입 전 가능한지 확인</span>\r\n    critical section <span class=\"token comment\">// 임계영역 실행</span>\r\n    exit section <span class=\"token comment\">// 나가기</span>\r\n    remainder section <span class=\"token comment\">// 나머지 코드</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"임계영역을-해결책이-되기-위한-조건\" style=\"position:relative;\"><a href=\"#%EC%9E%84%EA%B3%84%EC%98%81%EC%97%AD%EC%9D%84-%ED%95%B4%EA%B2%B0%EC%B1%85%EC%9D%B4-%EB%90%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%A1%B0%EA%B1%B4\" aria-label=\"임계영역을 해결책이 되기 위한 조건 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>임계영역을 해결책이 되기 위한 조건</h2>\n<ol>\n<li>상호 배제(<code class=\"language-text\">Mutual Exclusion</code>) : 한번의 하나의 프로세스/스레드만 임계영역에 진입 가능</li>\n<li>진행(<code class=\"language-text\">Progress</code>) : 임계영역에 진입을 원하는 프로세스/스레드가 있고 임계영역이 비워져있다면 진입 가능</li>\n<li>한정된 대기(<code class=\"language-text\">Bounded Waiting</code>) : 프로세스/스레드가 임계영역에 진입하기 위해 대기하는 시간이 한정되어야 함</li>\n</ol>\n<h2 id=\"thread-unsafe\" style=\"position:relative;\"><a href=\"#thread-unsafe\" aria-label=\"thread unsafe permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thread-unsafe</h2>\n<ul>\n<li>언어에서 기본적으로 제공하는 메소드나 API가 모두 동기화를 지원하지 않음</li>\n<li>공식문서를 확인하여 지원 여부 확인 및 필요시 직접 구현</li>\n</ul>\n<h1 id=\"상호-배제-구현-방법\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95\" aria-label=\"상호 배제 구현 방법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상호 배제 구현 방법</h1>\n<h2 id=\"spin-lock\" style=\"position:relative;\"><a href=\"#spin-lock\" aria-label=\"spin lock permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>spin lock</h2>\n<ul>\n<li>임계영역 진입을 위해 <code class=\"language-text\">lock</code>을 획득하고 임계영역 종료 후 해제</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"61787032476562320000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`volatile int lock = 0; // global variable\r\n\r\n// 임계영역 진입 전 임계영역이 사용중인지 확인\r\n// 임계영역이 사용중이면 1, 사용중이지 않으면 0\r\nint testAndSet(int *lockPtr) {\r\n    int oldLock = *lockPtr;\r\n    *lockPtr = 1;\r\n    return oldLock;\r\n}\r\n\r\nvoid criticalSection() {\r\n    while(testAndSet(&lock) == 1); // 임계영역 진입 전 임계영역이 사용중인지 확인\r\n    ...critical section... // 임계영역 실행\r\n    lock = 0; // 임계영역 종료\r\n}`, `61787032476562320000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> lock <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global variable</span>\r\n\r\n<span class=\"token comment\">// 임계영역 진입 전 임계영역이 사용중인지 확인</span>\r\n<span class=\"token comment\">// 임계영역이 사용중이면 1, 사용중이지 않으면 0</span>\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">testAndSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>lockPtr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">int</span> oldLock <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>lockPtr<span class=\"token punctuation\">;</span>\r\n    <span class=\"token operator\">*</span>lockPtr <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> oldLock<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">criticalSection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">testAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 임계영역 진입 전 임계영역이 사용중인지 확인</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>critical section<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// 임계영역 실행</span>\r\n    lock <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 임계영역 종료</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">testAndSet</code>은 CPU atomic 명령어\n<ul>\n<li>실행 중간에 간섭받거나 중단되지 않음</li>\n<li>동시에 실행 못하게 함, 두개의 스레드가 멀티 코어로 동시에 실행하려해도 하나가 먼지 실행되며 끝나고 다음 실행</li>\n</ul>\n</li>\n<li><code class=\"language-text\">lock</code>을 계속 확인하며 비효율적</li>\n</ul>\n<h2 id=\"mutex\" style=\"position:relative;\"><a href=\"#mutex\" aria-label=\"mutex permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mutex</h2>\n<ul>\n<li><code class=\"language-text\">lock</code>이 준비되면 다음 스레드에게 알림</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"12428778014800468000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`volatile int value = 1; // 0: 임계영역 사용중, 1: 임계영역 사용 가능\r\nvolatile int guard = 0; // value에 대한 동기화 보장\r\n\r\nvoid lock() {\r\n    while(testAndSet(&guard) == 1);\r\n    if(value == 0) {\r\n        ... 접근한 현재 스레드를 큐에 넣음\r\n    } else {\r\n        value = 0;\r\n    }\r\n    guard = 0;\r\n}\r\n\r\nvoid unlock() {\r\n    while(testAndSet(&guard) == 1);\r\n    if(큐에 대기중인 스레드가 있으면) {\r\n        ... 큐에서 스레드를 꺼내 임계영역에 진입\r\n    } else {\r\n        value = 1;\r\n    }\r\n    guard = 0;\r\n}\r\n\r\n// 사용\r\nlock();\r\n...critical section...\r\nunlock();`, `12428778014800468000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0: 임계영역 사용중, 1: 임계영역 사용 가능</span>\r\n<span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value에 대한 동기화 보장</span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">testAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>guard<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 접근한 현재 스레드를 큐에 넣음\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">testAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>guard<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>큐에 대기중인 스레드가 있으면<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 큐에서 스레드를 꺼내 임계영역에 진입\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 사용</span>\r\n<span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>critical section<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"spin-lock-vs-mutex\" style=\"position:relative;\"><a href=\"#spin-lock-vs-mutex\" aria-label=\"spin lock vs mutex permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>spin lock vs mutex</h2>\n<ul>\n<li>mutex는 큐에서 대기하고 호출하는 <code class=\"language-text\">Context Switching</code>이 발생</li>\n<li><code class=\"language-text\">critical section</code> 작업이 <code class=\"language-text\">Context Switching</code> 보다 빨리 끝나면 => 굳이 큐에서 대기하는 <code class=\"language-text\">Context Switching</code>이 더 안좋음</li>\n<li>즉, <code class=\"language-text\">critical section</code> 작업이 빠르면 <code class=\"language-text\">spin lock</code>이 더 좋음</li>\n</ul>\n<blockquote>\n<p>위 조건은 멀티코어 환경에서 성립<br>\n싱글코어라면 한번에 하나의 스레드만 실행됨<br>\n즉, spin lock에서 while로 cpu time동안 lock을 확인해도 처음에 lock을 획득 못했다면 해당 cpu time 동안 계속 획득 못함<br>\nmutex는 끝나면 알려주므로 불필요한 <code class=\"language-text\">Context Switching</code>이 발생하지 않으므로 싱글 코어에서는 mutex가 더 좋음</p>\n</blockquote>\n<h2 id=\"semaphore\" style=\"position:relative;\"><a href=\"#semaphore\" aria-label=\"semaphore permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>semaphore</h2>\n<ul>\n<li>하나 이상의 프로세스/스레드가 <code class=\"language-text\">critical section</code>에 진입할 수 있도록 함</li>\n<li><code class=\"language-text\">mutex</code>에서 <code class=\"language-text\">value</code>가 0 또는 1이었다면, <code class=\"language-text\">semaphore</code>에서는 0 이상의 값을 가짐</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"69755020152487340000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`volatile int value = 1; // 임계영역에 접근 가능한 스레드 수수\r\nvolatile int guard = 0; // value에 대한 동기화 보장\r\n\r\nvoid wait() {\r\n    while(testAndSet(&guard) == 1);\r\n    if(value == 0) {\r\n        ... 접근한 현재 스레드를 큐에 넣음\r\n    } else {\r\n        value -= 1; // 임계영역에 접근 했으므로 -1\r\n    }\r\n    guard = 0;\r\n}\r\n\r\nvoid signal() {\r\n    while(testAndSet(&guard) == 1);\r\n    if(큐에 대기중인 스레드가 있으면) {\r\n        ... 큐에서 스레드를 꺼내 임계영역에 진입\r\n    } else {\r\n        value += 1; // 임계영역에 접근 해제 했으므로 +1\r\n    }\r\n    guard = 0;\r\n}\r\n\r\n// 사용\r\nwait();\r\n...critical section...\r\nsignal();\r\n\r\n// 순서 제어 사용\r\n// thread1이 먼저 실행되어야 하는 경우\r\n...thread1 work... // wait() 없이 실행\r\nsignal(); // thread1 종료\r\n\r\nwait(); // thread2 대기\r\n...thread2 work... // thread2 실행`, `69755020152487340000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 임계영역에 접근 가능한 스레드 수수</span>\r\n<span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value에 대한 동기화 보장</span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">testAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>guard<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 접근한 현재 스레드를 큐에 넣음\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        value <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 임계영역에 접근 했으므로 -1</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">testAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>guard<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>큐에 대기중인 스레드가 있으면<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 큐에서 스레드를 꺼내 임계영역에 진입\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 임계영역에 접근 해제 했으므로 +1</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 사용</span>\r\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>critical section<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// 순서 제어 사용</span>\r\n<span class=\"token comment\">// thread1이 먼저 실행되어야 하는 경우</span>\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>thread1 work<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// wait() 없이 실행</span>\r\n<span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// thread1 종료</span>\r\n\r\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// thread2 대기</span>\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>thread2 work<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// thread2 실행</span></code></pre></div>\n<h2 id=\"semaphore-예시\" style=\"position:relative;\"><a href=\"#semaphore-%EC%98%88%EC%8B%9C\" aria-label=\"semaphore 예시 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>semaphore 예시</h2>\n<ul>\n<li><code class=\"language-text\">task1</code>가 끝나고 <code class=\"language-text\">task3</code>가 시작되어야 하는 경우</li>\n</ul>\n<p><img src=\"https://github.com/user-attachments/assets/cd0169bc-b810-44dd-a384-38e3bc80b7ce\" alt=\"Image\"></p>\n<ul>\n<li><code class=\"language-text\">semaphore</code>는 순서를 정하는데에도 사용용\n<ul>\n<li>위 그림처럼 <code class=\"language-text\">P1</code>에서는 <code class=\"language-text\">wait()</code> 없이 <code class=\"language-text\">task1</code>을 실행, <code class=\"language-text\">signal()</code> 실행행</li>\n<li><code class=\"language-text\">P2</code>에서는 <code class=\"language-text\">wait()</code>를 하고 <code class=\"language-text\">task3</code>를 실행</li>\n<li>멀티코어에서 각 <code class=\"language-text\">P1</code>과 <code class=\"language-text\">P2</code>가 동시에 실행될 때 항상 <code class=\"language-text\">task1</code>이 <code class=\"language-text\">task3</code>보다 먼저 실행됨</li>\n</ul>\n</li>\n<li>즉, <code class=\"language-text\">semaphore</code>의 <code class=\"language-text\">wait()</code>과 <code class=\"language-text\">signal()</code>이 각 다른 프로세스/스레드에서 실행될 수 있으며 이를 통하여 순서 제어 가능</li>\n</ul>\n<h2 id=\"mutex-vs-binary-semaphore\" style=\"position:relative;\"><a href=\"#mutex-vs-binary-semaphore\" aria-label=\"mutex vs binary semaphore permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mutex vs binary semaphore</h2>\n<ul>\n<li><code class=\"language-text\">mutex</code>는 <code class=\"language-text\">lock</code>을 가진 스레드만 해제 가능</li>\n<li><code class=\"language-text\">mutex</code>는 <code class=\"language-text\">priority inheritance</code> 속성이 존재</li>\n</ul>\n<blockquote>\n<p>priority inheritance란<br>\nHigh priority 프로세스(HPP)와 Low priority 프로세스(LPP)가 있을 때<br>\nLPP가 임계영역에 차지하고 있는 상황<br>\nHPP가 LPP가 임계영역을 빠져나올 때까지 대기 => HPP가 LPP의 의존성을 가짐<br>\n이 경우 LPP의 우선순위를 HPP만큼 높이는 것(mutex는 lock을 가진 프로세스만 해제 가능하므로)</p>\n</blockquote>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B2%BD%EC%9F%81-%EC%A1%B0%EA%B1%B4\">경쟁 조건</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94\">동기화</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%84%EA%B3%84%EC%98%81%EC%97%ADcritical-section\">임계영역(Critical Section)</a></p>\n<ul>\n<li><a href=\"#%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\">임계 영역 동작 과정</a></li>\n<li><a href=\"#%EC%9E%84%EA%B3%84%EC%98%81%EC%97%AD%EC%9D%84-%ED%95%B4%EA%B2%B0%EC%B1%85%EC%9D%B4-%EB%90%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%A1%B0%EA%B1%B4\">임계영역을 해결책이 되기 위한 조건</a></li>\n<li><a href=\"#thread-unsafe\">Thread-unsafe</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95\">상호 배제 구현 방법</a></p>\n<ul>\n<li><a href=\"#spin-lock\">spin lock</a></li>\n<li><a href=\"#mutex\">mutex</a></li>\n<li><a href=\"#spin-lock-vs-mutex\">spin lock vs mutex</a></li>\n<li><a href=\"#semaphore\">semaphore</a></li>\n<li><a href=\"#semaphore-%EC%98%88%EC%8B%9C\">semaphore 예시</a></li>\n<li><a href=\"#mutex-vs-binary-semaphore\">mutex vs binary semaphore</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"동기화","date":"2023년 02월 06일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/OS/2023-02-06-동기화/","previous":{"fields":{"slug":"/lecture/OS/2023-02-05-CPU-bound와-IO-bound/"},"frontmatter":{"categories":["OS"],"title":"CPU-bound와 IO-bound","date":"2023-02-05 09:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/OS/2023-02-07-Dead-Lock/"},"frontmatter":{"categories":["OS"],"title":"Dead Lock","date":"2023-02-07 09:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}