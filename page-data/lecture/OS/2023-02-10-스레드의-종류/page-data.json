{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/OS/2023-02-10-스레드의-종류/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1 id=\"하드웨어-스레드\" style=\"position:relative;\"><a href=\"#%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4-%EC%8A%A4%EB%A0%88%EB%93%9C\" aria-label=\"하드웨어 스레드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하드웨어 스레드</h1>\n<p>코어에서 메모리에서 데이터를 기다리는 시간이 낭비되는 것을 방지하기 위해<br>\n메모리를 기다리는 동안 다른 스레드를 실행하기 위해 만든 스레드<br>\n<img src=\"https://github.com/user-attachments/assets/219967bb-8d60-4a2c-a72c-2c19bd8fec03\" alt=\"Image\">\r\n위 그림처럼 실제 코어는 1개 이지만 메모리 대기 시간을 활용해<br>\n2개의 스레드를 실행함. 즉, OS 입장에서는 코어가 마치 2개인 것처럼 보임<br>\nOS는 이 논리코어를 기준으로 스케줄링을 함</p>\n<blockquote>\n<p>인텔에서는 이것을 <code class=\"language-text\">hyper-threading</code>이라고 부르며 물리 코어 1개당 2개의 HW thread를 만듦<br>\n논리코어의 개수(vCPU)는 곧 하드웨어 스레드의 개수를 의미</p>\n</blockquote>\n<h1 id=\"os-스레드\" style=\"position:relative;\"><a href=\"#os-%EC%8A%A4%EB%A0%88%EB%93%9C\" aria-label=\"os 스레드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OS 스레드</h1>\n<ul>\n<li>네이티브 스레드, 커널 스레드 등으로 불리기도 함</li>\n<li>CPU에서 실제 실행되는 단위</li>\n<li>CPU 스케줄링의 단위</li>\n<li>사용자의 코드와 커널 코드 모두 OS 스레드에서 실행</li>\n</ul>\n<h1 id=\"유저-스레드\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%A0%80-%EC%8A%A4%EB%A0%88%EB%93%9C\" aria-label=\"유저 스레드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유저 스레드</h1>\n<ul>\n<li>스레드의 개념을 프로그래밍 레벨에서 추상화 한 것</li>\n<li>그린 스레드라고도 불림</li>\n<li>자바는 현재 <code class=\"language-text\">one to one</code> 모델을 사용</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"19304806200386660000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`Thread thread = new Thread();\r\nthread.start();`, `19304806200386660000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nthread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"유저-스레드와-os-스레드의-연결\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%A0%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%99%80-os-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%97%B0%EA%B2%B0\" aria-label=\"유저 스레드와 os 스레드의 연결 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유저 스레드와 OS 스레드의 연결</h2>\n<p>유저 스레드가 실제 OS 스레드에 연결되어 실행 되어야함<br>\n이렇게 연결하는 방법인 관계 모델이 3가지 존재</p>\n<h2 id=\"one-to-one\" style=\"position:relative;\"><a href=\"#one-to-one\" aria-label=\"one to one permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>one to one</h2>\n<p><img src=\"https://github.com/user-attachments/assets/2b3a2f76-9083-4be2-b88a-2e894433c07f\" alt=\"Image\"></p>\n<ul>\n<li>하나의 유저 스레드가 하나의 OS 스레드에 연결되어 실행됨</li>\n<li>스레드 관리를 OS에 위임(스케줄링, 경쟁조건 방지, 데드락 방지, 멀티 코어 활용 등)</li>\n<li>하나의 스레드가 block 되어도 다른 스레드는 실행 가능</li>\n</ul>\n<h2 id=\"many-to-one\" style=\"position:relative;\"><a href=\"#many-to-one\" aria-label=\"many to one permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>many to one</h2>\n<p><img src=\"https://github.com/user-attachments/assets/7a049c4b-02ec-4d3e-96c3-efad04ab533d\" alt=\"Image\"></p>\n<ul>\n<li>여러 개의 유저 스레드가 하나의 OS 스레드에 연결되어 실행됨</li>\n<li>실제 <code class=\"language-text\">Context Switching</code>이 일어나지 않고 프로그래밍 레벨에서만 스위칭이 일어나 빠름</li>\n<li>경쟁 조건 발생 가능성이 낮음</li>\n<li>멀티 코어 활용 불가</li>\n<li>하나의 스레드가 block 되면 다른 스레드도 실행 불가</li>\n</ul>\n<h2 id=\"many-to-many\" style=\"position:relative;\"><a href=\"#many-to-many\" aria-label=\"many to many permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>many to many</h2>\n<p><img src=\"https://github.com/user-attachments/assets/324da468-b99f-47f4-af8d-c56495aa37d8\" alt=\"Image\"></p>\n<ul>\n<li>위의 2모델의 장점만 가지고 있는 모델</li>\n<li>하지만 구현이 복잡함</li>\n</ul>\n<h1 id=\"커널-스레드os와-다른-의미의\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%84%90-%EC%8A%A4%EB%A0%88%EB%93%9Cos%EC%99%80-%EB%8B%A4%EB%A5%B8-%EC%9D%98%EB%AF%B8%EC%9D%98\" aria-label=\"커널 스레드os와 다른 의미의 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커널 스레드(OS와 다른 의미의)</h1>\n<ul>\n<li>커널 코드를 실제 실행하는 스레드</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4-%EC%8A%A4%EB%A0%88%EB%93%9C\">하드웨어 스레드</a></p>\n</li>\n<li>\n<p><a href=\"#os-%EC%8A%A4%EB%A0%88%EB%93%9C\">OS 스레드</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9C%A0%EC%A0%80-%EC%8A%A4%EB%A0%88%EB%93%9C\">유저 스레드</a></p>\n<ul>\n<li><a href=\"#%EC%9C%A0%EC%A0%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%99%80-os-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%97%B0%EA%B2%B0\">유저 스레드와 OS 스레드의 연결</a></li>\n<li><a href=\"#one-to-one\">one to one</a></li>\n<li><a href=\"#many-to-one\">many to one</a></li>\n<li><a href=\"#many-to-many\">many to many</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%BB%A4%EB%84%90-%EC%8A%A4%EB%A0%88%EB%93%9Cos%EC%99%80-%EB%8B%A4%EB%A5%B8-%EC%9D%98%EB%AF%B8%EC%9D%98\">커널 스레드(OS와 다른 의미의)</a></p>\n</li>\n</ul>","frontmatter":{"title":"스레드의 종류","date":"2023년 02월 10일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/OS/2023-02-10-스레드의-종류/","previous":{"fields":{"slug":"/lecture/OS/2023-02-09-인터럽트와-시스템-콜/"},"frontmatter":{"categories":["OS"],"title":"인터럽트와 시스템 콜","date":"2023-02-09 09:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/OS/2023-02-11-스레드-풀/"},"frontmatter":{"categories":["OS"],"title":"스레드 풀","date":"2023-02-11 09:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}