{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/프론트엔드 테스트/2024-01-07-FE-통합-테스트/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"0-들어가며\" style=\"position:relative;\"><a href=\"#0-%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"0 들어가며 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 들어가며</h2>\n<p>FE에서의 통합 테스트와 예시를 정리</p>\n<h2 id=\"1-fe에서-통합-테스트란\" style=\"position:relative;\"><a href=\"#1-fe%EC%97%90%EC%84%9C-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%9E%80\" aria-label=\"1 fe에서 통합 테스트란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. FE에서 통합 테스트란?</h2>\n<ul>\n<li>통합 테스트 : 2개 이상의 모듈이 상호 작용하여 발생하는 상태를 검증</li>\n<li>FE에서의 통합 테스트 : API와 함께 상호작용 하는 컴포넌트 조합을 테스트, 특정 상태를 기준으로 동작하는 컴포넌트 조합을 테스트</li>\n</ul>\n<h2 id=\"2-통합-테스트-대상-선정\" style=\"position:relative;\"><a href=\"#2-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81-%EC%84%A0%EC%A0%95\" aria-label=\"2 통합 테스트 대상 선정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 통합 테스트 대상 선정</h2>\n<h3 id=\"1-거대한-통합-테스트의-단점\" style=\"position:relative;\"><a href=\"#1-%EA%B1%B0%EB%8C%80%ED%95%9C-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"1 거대한 통합 테스트의 단점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 거대한 통합 테스트의 단점</h3>\n<ul>\n<li>모킹 코드가 증가하여 테스트 신뢰성이 저하</li>\n<li>작은 수정사항에도 많은 테스트가 깨질 수 있으므로 유지 보수성이 떨어짐</li>\n</ul>\n<h3 id=\"2-비즈니스-로직을-기준으로-분리한-통합-테스트의-장점\" style=\"position:relative;\"><a href=\"#2-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%A1%9C%EC%A7%81%EC%9D%84-%EA%B8%B0%EC%A4%80%EC%9C%BC%EB%A1%9C-%EB%B6%84%EB%A6%AC%ED%95%9C-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"2 비즈니스 로직을 기준으로 분리한 통합 테스트의 장점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 비즈니스 로직을 기준으로 분리한 통합 테스트의 장점</h3>\n<ul>\n<li>핵심 비즈니스 로직을 독립적인 관점에서 효율적으로 테스트 가능</li>\n<li>테스트를 통해 앱의 기능을 이해하기 쉬움</li>\n<li>불필요한 단위 테스트를 줄일 수 있음</li>\n<li>각 영역 별로 필요한 부분만 모킹</li>\n</ul>\n<h3 id=\"3-통합-테스트-주의사항\" style=\"position:relative;\"><a href=\"#3-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"3 통합 테스트 주의사항 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 통합 테스트 주의사항</h3>\n<ul>\n<li>가능한 모킹을 최소화하여 실제 기능과 유사하게 검증</li>\n<li>비즈니스 로직을 처리하는 상태 관리나 API 로직은 상위 컴포넌트에서 응집하여 관리하고 상위 컴포넌트를 테스트</li>\n</ul>\n<h2 id=\"3-zustand-상태-관리-모킹\" style=\"position:relative;\"><a href=\"#3-zustand-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%AA%A8%ED%82%B9\" aria-label=\"3 zustand 상태 관리 모킹 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Zustand 상태 관리 모킹</h2>\n<h3 id=\"1-setuptestsjs에서-모킹-선언\" style=\"position:relative;\"><a href=\"#1-setuptestsjs%EC%97%90%EC%84%9C-%EB%AA%A8%ED%82%B9-%EC%84%A0%EC%96%B8\" aria-label=\"1 setuptestsjs에서 모킹 선언 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) <code class=\"language-text\">setupTests.js</code>에서 모킹 선언</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"34593269402634387000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`// setupTests.js\r\n...\r\nvi.mock('zustand');\r\n...`, `34593269402634387000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// setupTests.js</span>\r\n<span class=\"token operator\">...</span>\r\nvi<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zustand'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token operator\">...</span></code></pre></div>\n<h3 id=\"2-zustandjs에서-스토어-초기화\" style=\"position:relative;\"><a href=\"#2-zustandjs%EC%97%90%EC%84%9C-%EC%8A%A4%ED%86%A0%EC%96%B4-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"2 zustandjs에서 스토어 초기화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) <code class=\"language-text\">zustand.js</code>에서 스토어 초기화</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"71857170393882950000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`// __mocks__/zustand.js\r\n// __mocks__ 폴더 내에 파일 이름이 동일한 모듈을 생성하면 자동으로 모킹 가능\r\nconst { create: actualCreate } = await vi.importActual('zustand');\r\nimport { act } from '@testing-library/react';\r\n\r\n// 앱에 선언된 모든 스토어에 대해 재설정 함수를 저장\r\nconst storeResetFns = new Set();\r\n\r\n// 스토어를 생성할 때 초기 상태를 가져와 리셋 함수를 생성하고 set에 추가합니다.\r\nexport const create = createState => {\r\n  const store = actualCreate(createState);\r\n  const initialState = store.getState();\r\n  storeResetFns.add(() => store.setState(initialState, true));\r\n  return store;\r\n};\r\n\r\n// 테스트가 구동되기 전 모든 스토어를 리셋합니다.\r\nbeforeEach(() => {\r\n  act(() => storeResetFns.forEach(resetFn => resetFn()));\r\n});`, `71857170393882950000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// __mocks__/zustand.js</span>\r\n<span class=\"token comment\">// __mocks__ 폴더 내에 파일 이름이 동일한 모듈을 생성하면 자동으로 모킹 가능</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">create</span><span class=\"token operator\">:</span> actualCreate <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">importActual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zustand'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// 앱에 선언된 모든 스토어에 대해 재설정 함수를 저장</span>\r\n<span class=\"token keyword\">const</span> storeResetFns <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// 스토어를 생성할 때 초기 상태를 가져와 리셋 함수를 생성하고 set에 추가합니다.</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">createState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">actualCreate</span><span class=\"token punctuation\">(</span>createState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  storeResetFns<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> store<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// 테스트가 구동되기 전 모든 스토어를 리셋합니다.</span>\r\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> storeResetFns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resetFn</span> <span class=\"token operator\">=></span> <span class=\"token function\">resetFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"3-스토어-상태-변경을-위한-mockzustandstorejsx-생성\" style=\"position:relative;\"><a href=\"#3-%EC%8A%A4%ED%86%A0%EC%96%B4-%EC%83%81%ED%83%9C-%EB%B3%80%EA%B2%BD%EC%9D%84-%EC%9C%84%ED%95%9C-mockzustandstorejsx-%EC%83%9D%EC%84%B1\" aria-label=\"3 스토어 상태 변경을 위한 mockzustandstorejsx 생성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 스토어 상태 변경을 위한 <code class=\"language-text\">mockZustandStore.jsx</code> 생성</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"19687698827815270000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`// mockZustandStore.jsx\r\nimport { useCartStore } from '@/store/cart';\r\nimport { useFilterStore } from '@/store/filter';\r\nimport { useUserStore } from '@/store/user';\r\n\r\nconst mockStore = (hook, state) => {\r\n  const initStore = hook.getState();\r\n  hook.setState({ ...initStore, ...state }, true);\r\n};\r\n\r\nexport const mockUseUserStore = state => {\r\n  mockStore(useUserStore, state);\r\n};\r\n\r\nexport const mockUseCartStore = state => {\r\n  mockStore(useCartStore, state);\r\n};\r\n\r\nexport const mockUseFilterStore = state => {\r\n  mockStore(useFilterStore, state);\r\n};`, `19687698827815270000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// mockZustandStore.jsx</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useCartStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/store/cart'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useFilterStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/store/filter'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useUserStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/store/user'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mockStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">hook<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> initStore <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  hook<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>initStore<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>state <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mockUseUserStore</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">mockStore</span><span class=\"token punctuation\">(</span>useUserStore<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mockUseCartStore</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">mockStore</span><span class=\"token punctuation\">(</span>useCartStore<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mockUseFilterStore</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">mockStore</span><span class=\"token punctuation\">(</span>useFilterStore<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"4-zustand-상태-관리-통합-테스트\" style=\"position:relative;\"><a href=\"#4-zustand-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"4 zustand 상태 관리 통합 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Zustand 상태 관리 통합 테스트</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"46043419107006620000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`import { screen, within } from '@testing-library/react';\r\nimport React from 'react';\r\n\r\nimport ProductInfoTable from '@/pages/cart/components/ProductInfoTable';\r\nimport {\r\n  mockUseCartStore,\r\n  mockUseUserStore,\r\n} from '@/utils/test/mockZustandStore';\r\nimport render from '@/utils/test/render';\r\n\r\nbeforeEach(() => {\r\n  mockUseUserStore({ user: { id: 10 } });\r\n  mockUseCartStore({\r\n    cart: {\r\n      6: {\r\n        id: 6,\r\n        title: 'Handmade Cotton Fish',\r\n        price: 809,\r\n        description:\r\n          'The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality',\r\n        images: [\r\n          'https://user-images.githubusercontent.com/35371660/230712070-afa23da8-1bda-4cc4-9a59-50a263ee629f.png',\r\n          'https://user-images.githubusercontent.com/35371660/230711992-01a1a621-cb3d-44a7-b499-20e8d0e1a4bc.png',\r\n          'https://user-images.githubusercontent.com/35371660/230712056-2c468ef4-45c9-4bad-b379-a9a19d9b79a9.png',\r\n        ],\r\n        count: 3,\r\n      },\r\n      7: {\r\n        id: 7,\r\n        title: 'Awesome Concrete Shirt',\r\n        price: 442,\r\n        description:\r\n          'The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J',\r\n        images: [\r\n          'https://user-images.githubusercontent.com/35371660/230762100-b119d836-3c5b-4980-9846-b7d32ea4a08f.png',\r\n          'https://user-images.githubusercontent.com/35371660/230762118-46d965ab-7ea8-4e8a-9c0f-3ed90f96e1cd.png',\r\n          'https://user-images.githubusercontent.com/35371660/230762139-002578da-092d-4f34-8cae-2cf3b0dfabe9.png',\r\n        ],\r\n        count: 4,\r\n      },\r\n    },\r\n  });\r\n});\r\n\r\nit('장바구니에 포함된 아이템들의 이름, 수량, 합계가 제대로 노출된다', async () => {\r\n  await render(<ProductInfoTable />);\r\n\r\n  const [firstItem, secondItem] = screen.getAllByRole('row');\r\n\r\n  expect(\r\n    within(firstItem).getByText('Handmade Cotton Fish'),\r\n  ).toBeInTheDocument();\r\n  expect(within(firstItem).getByRole('textbox')).toHaveValue('3');\r\n  expect(within(firstItem).getByText('\\$2,427.00')).toBeInTheDocument();\r\n\r\n  expect(\r\n    within(secondItem).getByText('Awesome Concrete Shirt'),\r\n  ).toBeInTheDocument();\r\n  expect(within(secondItem).getByRole('textbox')).toHaveValue('4');\r\n  expect(within(secondItem).getByText('\\$1,768.00')).toBeInTheDocument();\r\n});\r\n\r\nit('특정 아이템의 수량이 변경되었을 때 값이 재계산되어 올바르게 업데이트 된다', async () => {\r\n  const { user } = await render(<ProductInfoTable />);\r\n  const [firstItem] = screen.getAllByRole('row');\r\n\r\n  const input = within(firstItem).getByRole('textbox');\r\n\r\n  await user.clear(input);\r\n  await user.type(input, '5');\r\n\r\n  // 809 * 5 = 4045\r\n  expect(screen.getByText('\\$4,045.00')).toBeInTheDocument();\r\n});\r\n\r\nit('특정 아이템의 수량이 1000개로 변경될 경우 &quot;최대 999개 까지 가능합니다!&quot;라고 경고 문구가 노출된다', async () => {\r\n  const alertSpy = vi.fn();\r\n\r\n  // windows.alert를 모킹\r\n  vi.stubGlobal('alert', alertSpy);\r\n\r\n  const { user } = await render(<ProductInfoTable />);\r\n  const [firstItem] = screen.getAllByRole('row');\r\n\r\n  const input = within(firstItem).getByRole('textbox');\r\n\r\n  await user.clear(input);\r\n  await user.type(input, '1000');\r\n\r\n  expect(alertSpy).toHaveBeenNthCalledWith(1, '최대 999개 까지 가능합니다!');\r\n});\r\n\r\nit('특정 아이템의 삭제 버튼을 클릭할 경우 해당 아이템이 사라진다', async () => {\r\n  const { user } = await render(<ProductInfoTable />);\r\n\r\n  const [, secondItem] = screen.getAllByRole('row');\r\n  const deleteButton = within(secondItem).getByRole('button');\r\n\r\n  expect(screen.getByText('Awesome Concrete Shirt')).toBeInTheDocument();\r\n\r\n  await user.click(deleteButton);\r\n\r\n  // queryBy~를 사용하여 요소가 존재하지 않아도 에러가 발생하지 않도록 한다\r\n  expect(screen.queryByText('Awesome Concrete Shirt')).not.toBeInTheDocument();\r\n});`, `46043419107006620000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> screen<span class=\"token punctuation\">,</span> within <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">import</span> ProductInfoTable <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/cart/components/ProductInfoTable'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\r\n  mockUseCartStore<span class=\"token punctuation\">,</span>\r\n  mockUseUserStore<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/test/mockZustandStore'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/test/render'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">mockUseUserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token function\">mockUseCartStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">cart</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token number\">6</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Handmade Cotton Fish'</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">809</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span>\r\n          <span class=\"token string\">'The slim &amp; simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality'</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">images</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n          <span class=\"token string\">'https://user-images.githubusercontent.com/35371660/230712070-afa23da8-1bda-4cc4-9a59-50a263ee629f.png'</span><span class=\"token punctuation\">,</span>\r\n          <span class=\"token string\">'https://user-images.githubusercontent.com/35371660/230711992-01a1a621-cb3d-44a7-b499-20e8d0e1a4bc.png'</span><span class=\"token punctuation\">,</span>\r\n          <span class=\"token string\">'https://user-images.githubusercontent.com/35371660/230712056-2c468ef4-45c9-4bad-b379-a9a19d9b79a9.png'</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token number\">7</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Awesome Concrete Shirt'</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">442</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span>\r\n          <span class=\"token string\">'The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J'</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">images</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n          <span class=\"token string\">'https://user-images.githubusercontent.com/35371660/230762100-b119d836-3c5b-4980-9846-b7d32ea4a08f.png'</span><span class=\"token punctuation\">,</span>\r\n          <span class=\"token string\">'https://user-images.githubusercontent.com/35371660/230762118-46d965ab-7ea8-4e8a-9c0f-3ed90f96e1cd.png'</span><span class=\"token punctuation\">,</span>\r\n          <span class=\"token string\">'https://user-images.githubusercontent.com/35371660/230762139-002578da-092d-4f34-8cae-2cf3b0dfabe9.png'</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'장바구니에 포함된 아이템들의 이름, 수량, 합계가 제대로 노출된다'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductInfoTable <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>firstItem<span class=\"token punctuation\">,</span> secondItem<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getAllByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'row'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token function\">within</span><span class=\"token punctuation\">(</span>firstItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Handmade Cotton Fish'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">within</span><span class=\"token punctuation\">(</span>firstItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'textbox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">within</span><span class=\"token punctuation\">(</span>firstItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$2,427.00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token function\">within</span><span class=\"token punctuation\">(</span>secondItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Awesome Concrete Shirt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">within</span><span class=\"token punctuation\">(</span>secondItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'textbox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">within</span><span class=\"token punctuation\">(</span>secondItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$1,768.00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'특정 아이템의 수량이 변경되었을 때 값이 재계산되어 올바르게 업데이트 된다'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductInfoTable <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>firstItem<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getAllByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'row'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">within</span><span class=\"token punctuation\">(</span>firstItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'textbox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// 809 * 5 = 4045</span>\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$4,045.00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'특정 아이템의 수량이 1000개로 변경될 경우 \"최대 999개 까지 가능합니다!\"라고 경고 문구가 노출된다'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> alertSpy <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// windows.alert를 모킹</span>\r\n  vi<span class=\"token punctuation\">.</span><span class=\"token function\">stubGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alert'</span><span class=\"token punctuation\">,</span> alertSpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductInfoTable <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>firstItem<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getAllByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'row'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">within</span><span class=\"token punctuation\">(</span>firstItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'textbox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token string\">'1000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>alertSpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenNthCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'최대 999개 까지 가능합니다!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'특정 아이템의 삭제 버튼을 클릭할 경우 해당 아이템이 사라진다'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductInfoTable <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> secondItem<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getAllByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'row'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> deleteButton <span class=\"token operator\">=</span> <span class=\"token function\">within</span><span class=\"token punctuation\">(</span>secondItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Awesome Concrete Shirt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>deleteButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// queryBy~를 사용하여 요소가 존재하지 않아도 에러가 발생하지 않도록 한다</span>\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">queryByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Awesome Concrete Shirt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"5-msw으로-apitanstack-query-모킹\" style=\"position:relative;\"><a href=\"#5-msw%EC%9C%BC%EB%A1%9C-apitanstack-query-%EB%AA%A8%ED%82%B9\" aria-label=\"5 msw으로 apitanstack query 모킹 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. msw으로 API(TanStack query) 모킹</h2>\n<h3 id=\"1-tanstack-query-테스트-환경-설정\" style=\"position:relative;\"><a href=\"#1-tanstack-query-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95\" aria-label=\"1 tanstack query 테스트 환경 설정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) TanStack query 테스트 환경 설정</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"94067033727766990000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`// render.jsx\r\n// https://tanstack.com/query/v4/docs/react/guides/testing\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      // ✅ turns retries off\r\n      retry: false,\r\n    },\r\n  },\r\n  logger: {\r\n    log: console.log,\r\n    warn: console.warn,\r\n    // ✅ no more errors on the console for tests\r\n    error: process.env.NODE_ENV === 'test' ? () => {} : console.error,\r\n  },\r\n});`, `94067033727766990000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// render.jsx</span>\r\n<span class=\"token comment\">// https://tanstack.com/query/v4/docs/react/guides/testing</span>\r\n<span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">defaultOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">queries</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token comment\">// ✅ turns retries off</span>\r\n      <span class=\"token literal-property property\">retry</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">logger</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">log</span><span class=\"token operator\">:</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">warn</span><span class=\"token operator\">:</span> console<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">,</span>\r\n    <span class=\"token comment\">// ✅ no more errors on the console for tests</span>\r\n    <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'test'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"2-api-모킹-핸들러-생성\" style=\"position:relative;\"><a href=\"#2-api-%EB%AA%A8%ED%82%B9-%ED%95%B8%EB%93%A4%EB%9F%AC-%EC%83%9D%EC%84%B1\" aria-label=\"2 api 모킹 핸들러 생성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) API 모킹 핸들러 생성</h3>\n<p>다음과 같은 핸들러에서 API 요청을 가로채서 응답을 설정할 수 있다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"88842432503454150000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`// __mocks__/handlers.js\r\nimport { rest } from 'msw';\r\n\r\nimport response from '@/__mocks__/response';\r\nimport { apiRoutes } from '@/apiRoutes';\r\n\r\nconst API_DOMAIN = 'http://localhost:3000';\r\n\r\nexport const handlers = [\r\n  ...[\r\n    // URL 경로\r\n    apiRoutes.users,\r\n    apiRoutes.product, \r\n    apiRoutes.categories, \r\n    apiRoutes.couponList,\r\n  ].map(path =>\r\n    // 해당 경로에 대한 응답 설정\r\n    rest.get(\\`\\${API_DOMAIN}\\${path}\\`, (_, res, ctx) =>\r\n      res(ctx.status(200), ctx.json(response[path])),\r\n    ),\r\n  ),\r\n  rest.get(\\`\\${API_DOMAIN}\\${apiRoutes.products}\\`, (req, res, ctx) => {\r\n    const data = response[apiRoutes.products];\r\n    const offset = Number(req.url.searchParams.get('offset'));\r\n    const limit = Number(req.url.searchParams.get('limit'));\r\n    const products = data.products.filter(\r\n      (_, index) => index >= offset && index < offset + limit,\r\n    );\r\n\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json({ products, lastPage: products.length < limit }),\r\n    );\r\n  }),\r\n  rest.get(\\`\\${API_DOMAIN}\\${apiRoutes.profile}\\`, (req, res, ctx) => {\r\n    return res(ctx.status(200), ctx.json(null));\r\n  }),\r\n  rest.post(\\`\\${API_DOMAIN}\\${apiRoutes.users}\\`, (req, res, ctx) => {\r\n    if (req.body.name === 'FAIL') {\r\n      return res(ctx.status(500));\r\n    }\r\n\r\n    return res(ctx.status(200));\r\n  }),\r\n  rest.post(\\`\\${API_DOMAIN}\\${apiRoutes.login}\\`, (req, res, ctx) => {\r\n    if (req.body.email === 'FAIL@gmail.com') {\r\n      return res(ctx.status(401));\r\n    }\r\n\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json({\r\n        access_token: 'access_token',\r\n      }),\r\n    );\r\n  }),\r\n  rest.post(\\`\\${API_DOMAIN}\\${apiRoutes.log}\\`, (_, res, ctx) => {\r\n    return res(ctx.status(200));\r\n  }),\r\n];`, `88842432503454150000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// __mocks__/handlers.js</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> rest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'msw'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">import</span> response <span class=\"token keyword\">from</span> <span class=\"token string\">'@/__mocks__/response'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> apiRoutes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/apiRoutes'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token constant\">API_DOMAIN</span> <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> handlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\r\n  <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span>\r\n    <span class=\"token comment\">// URL 경로</span>\r\n    apiRoutes<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">,</span>\r\n    apiRoutes<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">,</span> \r\n    apiRoutes<span class=\"token punctuation\">.</span>categories<span class=\"token punctuation\">,</span> \r\n    apiRoutes<span class=\"token punctuation\">.</span>couponList<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span> <span class=\"token operator\">=></span>\r\n    <span class=\"token comment\">// 해당 경로에 대한 응답 설정</span>\r\n    rest<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">API_DOMAIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\r\n      <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  rest<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">API_DOMAIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>apiRoutes<span class=\"token punctuation\">.</span>products<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">[</span>apiRoutes<span class=\"token punctuation\">.</span>products<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'offset'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> limit <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'limit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>products<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\r\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index <span class=\"token operator\">>=</span> offset <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> offset <span class=\"token operator\">+</span> limit<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>\r\n      ctx<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      ctx<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> products<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastPage</span><span class=\"token operator\">:</span> products<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> limit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  rest<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">API_DOMAIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>apiRoutes<span class=\"token punctuation\">.</span>profile<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  rest<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">API_DOMAIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>apiRoutes<span class=\"token punctuation\">.</span>users<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'FAIL'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  rest<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">API_DOMAIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>apiRoutes<span class=\"token punctuation\">.</span>login<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>email <span class=\"token operator\">===</span> <span class=\"token string\">'FAIL@gmail.com'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>\r\n      ctx<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      ctx<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">access_token</span><span class=\"token operator\">:</span> <span class=\"token string\">'access_token'</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  rest<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">API_DOMAIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>apiRoutes<span class=\"token punctuation\">.</span>log<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"3-setuptestsjs에서-msw-설정\" style=\"position:relative;\"><a href=\"#3-setuptestsjs%EC%97%90%EC%84%9C-msw-%EC%84%A4%EC%A0%95\" aria-label=\"3 setuptestsjs에서 msw 설정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) setupTests.js에서 msw 설정</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"24975588000968730000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`import { setupServer } from 'msw/node';\r\n\r\nimport { handlers } from '@/__mocks__/handlers';\r\n\r\n// msw 서버 생성\r\nexport const server = setupServer(...handlers);\r\n\r\nbeforeAll(() => {\r\n  // msw 서버 시작\r\n  server.listen();\r\n});\r\n\r\nafterEach(() => {\r\n  // msw 서버 초기화\r\n  // 일부 테스트는 server.use()를 사용하여 API 응답을 변경하기 때문에 초기화가 필요\r\n  server.resetHandlers();\r\n  vi.clearAllMocks();\r\n});\r\n\r\nafterAll(() => {\r\n  vi.resetAllMocks();\r\n  // msw 서버 종료\r\n  server.close();\r\n});`, `24975588000968730000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setupServer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'msw/node'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> handlers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/__mocks__/handlers'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// msw 서버 생성</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">setupServer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// msw 서버 시작</span>\r\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// msw 서버 초기화</span>\r\n  <span class=\"token comment\">// 일부 테스트는 server.use()를 사용하여 API 응답을 변경하기 때문에 초기화가 필요</span>\r\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">resetHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  vi<span class=\"token punctuation\">.</span><span class=\"token function\">clearAllMocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  vi<span class=\"token punctuation\">.</span><span class=\"token function\">resetAllMocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token comment\">// msw 서버 종료</span>\r\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"6-msw으로-apitanstack-query-통합-테스트\" style=\"position:relative;\"><a href=\"#6-msw%EC%9C%BC%EB%A1%9C-apitanstack-query-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"6 msw으로 apitanstack query 통합 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. msw으로 API(TanStack query) 통합 테스트</h2>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"31145603356024720000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`import { screen, within } from '@testing-library/react';\r\nimport React from 'react';\r\n\r\nimport data from '@/__mocks__/response/products.json';\r\nimport ProductList from '@/pages/home/components/ProductList';\r\nimport { formatPrice } from '@/utils/formatter';\r\nimport {\r\n  mockUseUserStore,\r\n  mockUseCartStore,\r\n} from '@/utils/test/mockZustandStore';\r\nimport render from '@/utils/test/render';\r\n\r\nconst PRODUCT_PAGE_LIMIT = 5;\r\n\r\nconst navigateFn = vi.fn();\r\n\r\nvi.mock('react-router-dom', async () => {\r\n  const original = await vi.importActual('react-router-dom');\r\n  return {\r\n    ...original,\r\n    useNavigate: () => navigateFn,\r\n    useLocation: () => ({\r\n      state: {\r\n        prevPath: 'prevPath',\r\n      },\r\n    }),\r\n  };\r\n});\r\n\r\nit('로딩이 완료된 경우 상품 리스트가 제대로 모두 노출된다', async () => {\r\n  await render(<ProductList limit={PRODUCT_PAGE_LIMIT} />);\r\n\r\n  // findBy~를 사용하면 기본적으로 1초동안 50ms마다 요소를 조회하여 비동기 요소를 기다린다.\r\n  const productCards = await screen.findAllByTestId('product-card');\r\n\r\n  expect(productCards).toHaveLength(PRODUCT_PAGE_LIMIT);\r\n\r\n  productCards.forEach((el, index) => {\r\n    const productCard = within(el);\r\n    const product = data.products[index];\r\n\r\n    expect(productCard.getByText(product.title)).toBeInTheDocument();\r\n    expect(productCard.getByText(product.category.name)).toBeInTheDocument();\r\n    expect(\r\n      productCard.getByText(formatPrice(product.price)),\r\n    ).toBeInTheDocument();\r\n    expect(\r\n      productCard.getByRole('button', { name: '장바구니' }),\r\n    ).toBeInTheDocument();\r\n    expect(\r\n      productCard.getByRole('button', { name: '구매' }),\r\n    ).toBeInTheDocument();\r\n  });\r\n});\r\n\r\nit('보여줄 상품 리스트가 더 있는 경우 show more 버튼이 노출되며, 버튼을 누르면 상품 리스트를 더 가져온다.', async () => {\r\n  const { user } = await render(<ProductList limit={PRODUCT_PAGE_LIMIT} />);\r\n\r\n  await screen.findAllByTestId('product-card');\r\n\r\n  expect(screen.getByText('Show more')).toBeInTheDocument();\r\n\r\n  const moreBtn = screen.getByText('Show more');\r\n  await user.click(moreBtn);\r\n\r\n  expect(await screen.findAllByTestId('product-card')).toHaveLength(\r\n    PRODUCT_PAGE_LIMIT * 2,\r\n  );\r\n});\r\n\r\nit('보여줄 상품 리스트가 없는 경우 show more 버튼이 노출되지 않는다.', async () => {\r\n  await render(<ProductList limit={20} />);\r\n\r\n  await screen.findAllByTestId('product-card');\r\n\r\n  expect(screen.queryByText('Show more')).not.toBeInTheDocument();\r\n});\r\n\r\ndescribe('로그인 상태일 경우', () => {\r\n  beforeEach(() => {\r\n    mockUseUserStore({ isLogin: true, user: { id: 10 } });\r\n  });\r\n\r\n  it('구매 버튼 클릭시 addCartItem 메서드가 호출되며, &quot;/cart&quot; 경로로 navigate 함수가 호출된다.', async () => {\r\n    const addCartItemFn = vi.fn();\r\n    mockUseCartStore({ addCartItem: addCartItemFn });\r\n\r\n    const { user } = await render(<ProductList limit={PRODUCT_PAGE_LIMIT} />);\r\n\r\n    await screen.findAllByTestId('product-card');\r\n\r\n    // 첫번째 상품을 대상으로 검증한다.\r\n    const productIndex = 0;\r\n    await user.click(\r\n      screen.getAllByRole('button', { name: '구매' })[productIndex],\r\n    );\r\n\r\n    expect(addCartItemFn).toHaveBeenNthCalledWith(\r\n      1,\r\n      data.products[productIndex],\r\n      10,\r\n      1,\r\n    );\r\n    expect(navigateFn).toHaveBeenNthCalledWith(1, '/cart');\r\n  });\r\n\r\n  it('장바구니 버튼 클릭시 &quot;장바구니 추가 완료!&quot; toast를 노출하며, addCartItem 메서드가 호출된다.', async () => {\r\n    const addCartItemFn = vi.fn();\r\n    mockUseCartStore({ addCartItem: addCartItemFn });\r\n\r\n    const { user } = await render(<ProductList limit={PRODUCT_PAGE_LIMIT} />);\r\n\r\n    await screen.findAllByTestId('product-card');\r\n\r\n    // 첫번째 상품을 대상으로 검증한다.\r\n    const productIndex = 0;\r\n    const product = data.products[productIndex];\r\n    await user.click(\r\n      screen.getAllByRole('button', { name: '장바구니' })[productIndex],\r\n    );\r\n\r\n    expect(addCartItemFn).toHaveBeenNthCalledWith(1, product, 10, 1);\r\n    expect(\r\n      screen.getByText(\\`\\${product.title} 장바구니 추가 완료!\\`),\r\n    ).toBeInTheDocument();\r\n  });\r\n});\r\n\r\ndescribe('로그인이 되어 있지 않은 경우', () => {\r\n  it('구매 버튼 클릭시 &quot;/login&quot; 경로로 navigate 함수가 호출된다.', async () => {\r\n    const { user } = await render(<ProductList limit={PRODUCT_PAGE_LIMIT} />);\r\n\r\n    await screen.findAllByTestId('product-card');\r\n\r\n    // 첫번째 상품을 대상으로 검증한다.\r\n    const productIndex = 0;\r\n    await user.click(\r\n      screen.getAllByRole('button', { name: '구매' })[productIndex],\r\n    );\r\n\r\n    expect(navigateFn).toHaveBeenNthCalledWith(1, '/login');\r\n  });\r\n\r\n  it('장바구니 버튼 클릭시 &quot;/login&quot; 경로로 navigate 함수가 호출된다.', async () => {\r\n    const { user } = await render(<ProductList limit={PRODUCT_PAGE_LIMIT} />);\r\n\r\n    await screen.findAllByTestId('product-card');\r\n\r\n    // 첫번째 상품을 대상으로 검증한다.\r\n    const productIndex = 0;\r\n    await user.click(\r\n      screen.getAllByRole('button', { name: '장바구니' })[productIndex],\r\n    );\r\n\r\n    expect(navigateFn).toHaveBeenNthCalledWith(1, '/login');\r\n  });\r\n});\r\n\r\nit('상품 클릭시 &quot;/product/:productId&quot; 경로로 navigate 함수가 호출된다.', async () => {\r\n  const { user } = await render(<ProductList limit={PRODUCT_PAGE_LIMIT} />);\r\n\r\n  const [firstProduct] = await screen.findAllByTestId('product-card');\r\n\r\n  // 첫번째 상품을 대상으로 검증한다.\r\n  await user.click(firstProduct);\r\n\r\n  expect(navigateFn).toHaveBeenNthCalledWith(1, '/product/6');\r\n});`, `31145603356024720000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> screen<span class=\"token punctuation\">,</span> within <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">import</span> data <span class=\"token keyword\">from</span> <span class=\"token string\">'@/__mocks__/response/products.json'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> ProductList <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/home/components/ProductList'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> formatPrice <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/formatter'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\r\n  mockUseUserStore<span class=\"token punctuation\">,</span>\r\n  mockUseCartStore<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/test/mockZustandStore'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/test/render'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PRODUCT_PAGE_LIMIT</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> navigateFn <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nvi<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">importActual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>original<span class=\"token punctuation\">,</span>\r\n    <span class=\"token function-variable function\">useNavigate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> navigateFn<span class=\"token punctuation\">,</span>\r\n    <span class=\"token function-variable function\">useLocation</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">prevPath</span><span class=\"token operator\">:</span> <span class=\"token string\">'prevPath'</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'로딩이 완료된 경우 상품 리스트가 제대로 모두 노출된다'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductList limit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">PRODUCT_PAGE_LIMIT</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// findBy~를 사용하면 기본적으로 1초동안 50ms마다 요소를 조회하여 비동기 요소를 기다린다.</span>\r\n  <span class=\"token keyword\">const</span> productCards <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'product-card'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>productCards<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PRODUCT_PAGE_LIMIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  productCards<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> productCard <span class=\"token operator\">=</span> <span class=\"token function\">within</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>products<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>productCard<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>productCard<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span>category<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\r\n      productCard<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatPrice</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\r\n      productCard<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'장바구니'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\r\n      productCard<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'구매'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'보여줄 상품 리스트가 더 있는 경우 show more 버튼이 노출되며, 버튼을 누르면 상품 리스트를 더 가져온다.'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductList limit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">PRODUCT_PAGE_LIMIT</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'product-card'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Show more'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> moreBtn <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Show more'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>moreBtn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'product-card'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token constant\">PRODUCT_PAGE_LIMIT</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'보여줄 상품 리스트가 없는 경우 show more 버튼이 노출되지 않는다.'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductList limit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'product-card'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">queryByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Show more'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'로그인 상태일 경우'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">mockUseUserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isLogin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'구매 버튼 클릭시 addCartItem 메서드가 호출되며, \"/cart\" 경로로 navigate 함수가 호출된다.'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> addCartItemFn <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">mockUseCartStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">addCartItem</span><span class=\"token operator\">:</span> addCartItemFn <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductList limit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">PRODUCT_PAGE_LIMIT</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'product-card'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 첫번째 상품을 대상으로 검증한다.</span>\r\n    <span class=\"token keyword\">const</span> productIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>\r\n      screen<span class=\"token punctuation\">.</span><span class=\"token function\">getAllByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'구매'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>productIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>addCartItemFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenNthCalledWith</span><span class=\"token punctuation\">(</span>\r\n      <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n      data<span class=\"token punctuation\">.</span>products<span class=\"token punctuation\">[</span>productIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>navigateFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenNthCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/cart'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'장바구니 버튼 클릭시 \"장바구니 추가 완료!\" toast를 노출하며, addCartItem 메서드가 호출된다.'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> addCartItemFn <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">mockUseCartStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">addCartItem</span><span class=\"token operator\">:</span> addCartItemFn <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductList limit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">PRODUCT_PAGE_LIMIT</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'product-card'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 첫번째 상품을 대상으로 검증한다.</span>\r\n    <span class=\"token keyword\">const</span> productIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>products<span class=\"token punctuation\">[</span>productIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>\r\n      screen<span class=\"token punctuation\">.</span><span class=\"token function\">getAllByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'장바구니'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>productIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>addCartItemFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenNthCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\r\n      screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>product<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 장바구니 추가 완료!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'로그인이 되어 있지 않은 경우'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'구매 버튼 클릭시 \"/login\" 경로로 navigate 함수가 호출된다.'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductList limit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">PRODUCT_PAGE_LIMIT</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'product-card'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 첫번째 상품을 대상으로 검증한다.</span>\r\n    <span class=\"token keyword\">const</span> productIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>\r\n      screen<span class=\"token punctuation\">.</span><span class=\"token function\">getAllByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'구매'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>productIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>navigateFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenNthCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'장바구니 버튼 클릭시 \"/login\" 경로로 navigate 함수가 호출된다.'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductList limit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">PRODUCT_PAGE_LIMIT</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'product-card'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 첫번째 상품을 대상으로 검증한다.</span>\r\n    <span class=\"token keyword\">const</span> productIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>\r\n      screen<span class=\"token punctuation\">.</span><span class=\"token function\">getAllByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'장바구니'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>productIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>navigateFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenNthCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'상품 클릭시 \"/product/:productId\" 경로로 navigate 함수가 호출된다.'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ProductList limit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">PRODUCT_PAGE_LIMIT</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>firstProduct<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'product-card'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// 첫번째 상품을 대상으로 검증한다.</span>\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>firstProduct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>navigateFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenNthCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/product/6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#0-%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\">0. 들어가며</a></p>\n</li>\n<li>\n<p><a href=\"#1-fe%EC%97%90%EC%84%9C-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%9E%80\">1. FE에서 통합 테스트란?</a></p>\n</li>\n<li>\n<p><a href=\"#2-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81-%EC%84%A0%EC%A0%95\">2. 통합 테스트 대상 선정</a></p>\n<ul>\n<li><a href=\"#1-%EA%B1%B0%EB%8C%80%ED%95%9C-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%8B%A8%EC%A0%90\">(1) 거대한 통합 테스트의 단점</a></li>\n<li><a href=\"#2-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%A1%9C%EC%A7%81%EC%9D%84-%EA%B8%B0%EC%A4%80%EC%9C%BC%EB%A1%9C-%EB%B6%84%EB%A6%AC%ED%95%9C-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%9E%A5%EC%A0%90\">(2) 비즈니스 로직을 기준으로 분리한 통합 테스트의 장점</a></li>\n<li><a href=\"#3-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\">(3) 통합 테스트 주의사항</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-zustand-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%AA%A8%ED%82%B9\">3. Zustand 상태 관리 모킹</a></p>\n<ul>\n<li><a href=\"#1-setuptestsjs%EC%97%90%EC%84%9C-%EB%AA%A8%ED%82%B9-%EC%84%A0%EC%96%B8\">(1) <code class=\"language-text\">setupTests.js</code>에서 모킹 선언</a></li>\n<li><a href=\"#2-zustandjs%EC%97%90%EC%84%9C-%EC%8A%A4%ED%86%A0%EC%96%B4-%EC%B4%88%EA%B8%B0%ED%99%94\">(2) <code class=\"language-text\">zustand.js</code>에서 스토어 초기화</a></li>\n<li><a href=\"#3-%EC%8A%A4%ED%86%A0%EC%96%B4-%EC%83%81%ED%83%9C-%EB%B3%80%EA%B2%BD%EC%9D%84-%EC%9C%84%ED%95%9C-mockzustandstorejsx-%EC%83%9D%EC%84%B1\">(3) 스토어 상태 변경을 위한 <code class=\"language-text\">mockZustandStore.jsx</code> 생성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-zustand-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8\">4. Zustand 상태 관리 통합 테스트</a></p>\n</li>\n<li>\n<p><a href=\"#5-msw%EC%9C%BC%EB%A1%9C-apitanstack-query-%EB%AA%A8%ED%82%B9\">5. msw으로 API(TanStack query) 모킹</a></p>\n<ul>\n<li><a href=\"#1-tanstack-query-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95\">(1) TanStack query 테스트 환경 설정</a></li>\n<li><a href=\"#2-api-%EB%AA%A8%ED%82%B9-%ED%95%B8%EB%93%A4%EB%9F%AC-%EC%83%9D%EC%84%B1\">(2) API 모킹 핸들러 생성</a></li>\n<li><a href=\"#3-setuptestsjs%EC%97%90%EC%84%9C-msw-%EC%84%A4%EC%A0%95\">(3) setupTests.js에서 msw 설정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#6-msw%EC%9C%BC%EB%A1%9C-apitanstack-query-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8\">6. msw으로 API(TanStack query) 통합 테스트</a></p>\n</li>\n</ul>","frontmatter":{"title":"FE 통합 테스트","date":"2024년 01월 06일","tags":["FE","Test"]}}}]}},"pageContext":{"slug":"/lecture/프론트엔드 테스트/2024-01-07-FE-통합-테스트/","previous":{"fields":{"slug":"/lecture/프론트엔드 테스트/2023-12-23-FE-단위-테스트/"},"frontmatter":{"categories":["프론트엔드 테스트"],"title":"FE 단위 테스트","date":"2023-12-23 21:00:00 +0900","tags":["FE","Test"]}},"next":{"fields":{"slug":"/lecture/프론트엔드 테스트/2024-01-08-FE-통합-테스트-예시/"},"frontmatter":{"categories":["프론트엔드 테스트"],"title":"FE 통합 테스트 예시","date":"2024-01-08 01:00:00 +0900","tags":["FE","Test"]}}}},"staticQueryHashes":[],"slicesMap":{}}