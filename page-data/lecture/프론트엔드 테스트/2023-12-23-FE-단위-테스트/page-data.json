{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/프론트엔드 테스트/2023-12-23-FE-단위-테스트/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"0-들어가며\" style=\"position:relative;\"><a href=\"#0-%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"0 들어가며 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 들어가며</h2>\n<p>FE에서의 단위 테스트와 예시를 정리</p>\n<h2 id=\"1-fe에서-단위-테스트란\" style=\"position:relative;\"><a href=\"#1-fe%EC%97%90%EC%84%9C-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%9E%80\" aria-label=\"1 fe에서 단위 테스트란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. FE에서 단위 테스트란?</h2>\n<ul>\n<li>단위 테스트 : 앱에서 테스트 가능한 <code class=\"language-text\">가장 작은 소프트웨어</code>를 실행해 <code class=\"language-text\">예상대로 동작하는지</code> 확인하는 것</li>\n<li>FE에서의 단위 테스트 : <code class=\"language-text\">단일 함수 또는 단일 컴포넌트(Atomic 컴포넌트)</code>를 실행해 <code class=\"language-text\">결괏값 또는 상태(UI)</code>를 확인하는 것</li>\n</ul>\n<p>또한, FE 테스트 개요에서 정리했듯이 내부 <code class=\"language-text\">prop</code>, <code class=\"language-text\">state</code>를 테스트하는 것이 아닌 <code class=\"language-text\">UI</code>를 테스트한다.</p>\n<h2 id=\"2-단위-테스트-대상-선정\" style=\"position:relative;\"><a href=\"#2-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81-%EC%84%A0%EC%A0%95\" aria-label=\"2 단위 테스트 대상 선정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 단위 테스트 대상 선정</h2>\n<p>단위 테스트는 다른 모듈에 대한 의존성이 거의 없으면서 독립적인 역할을 할 때 효과적이다.</p>\n<ol>\n<li>공통 컴포넌트</li>\n</ol>\n<p>(단, <code class=\"language-text\">state</code>나 로직 없이 <code class=\"language-text\">UI</code>만 그리는 컴포넌트는 단위 테스트 대상 아님, 스토리북과 같은 도구를 사용)</p>\n<ol start=\"2\">\n<li>\n<p>공통 유틸 함수</p>\n</li>\n<li>\n<p>커스텀 훅</p>\n</li>\n</ol>\n<blockquote>\n<p>간단한 로직만 처리하는 컴포넌트는 상위 컴포넌트에서 함께 테스트 즉, 상위 컴포넌트의 테스트를 고려(단, 공통 컴포넌트처럼 독립적이라면 단위 테스트 수행)</p>\n</blockquote>\n<h2 id=\"2-공통-컴포넌트-단위-테스트\" style=\"position:relative;\"><a href=\"#2-%EA%B3%B5%ED%86%B5-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"2 공통 컴포넌트 단위 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 공통 컴포넌트 단위 테스트</h2>\n<h3 id=\"1-render-커스텀\" style=\"position:relative;\"><a href=\"#1-render-%EC%BB%A4%EC%8A%A4%ED%85%80\" aria-label=\"1 render 커스텀 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) render 커스텀</h3>\n<p>앞으로 나오는 예시에서 사용하는 <code class=\"language-text\">render</code>는 이 함수를 사용</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"38402094477869020000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`// render.js\r\nimport { render } from &quot;@testing-library/react&quot;;\r\nimport userEvent from &quot;@testing-library/user-event&quot;;\r\n\r\n// 컴포넌트에 비동기 동작이 있는 경우를 대비 async를 사용\r\nexport default async (component) => {\r\n  // userEvent 사용을 위한 설정,\r\n  // 필요시 setup({ logDOM: true }) 등 설정 가능\r\n  const user = userEvent.setup();\r\n\r\n  return {\r\n    user,\r\n    ...render(component)\r\n  };\r\n};`, `38402094477869020000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// render.js</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> userEvent <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/user-event\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// 컴포넌트에 비동기 동작이 있는 경우를 대비 async를 사용</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">component</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// userEvent 사용을 위한 설정,</span>\r\n  <span class=\"token comment\">// 필요시 setup({ logDOM: true }) 등 설정 가능</span>\r\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n    user<span class=\"token punctuation\">,</span>\r\n    <span class=\"token operator\">...</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"2-테스트-코드\" style=\"position:relative;\"><a href=\"#2-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-label=\"2 테스트 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 테스트 코드</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"1893550481304617700\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`it(&quot;className prop으로 설정한 css class가 적용된다.&quot;, async () => {\r\n  await render(<TextField className=&quot;my-class&quot; />);\r\n\r\n  const textInput = screen.getByPlaceholderText(&quot;텍스트를 입력해 주세요.&quot;);\r\n\r\n  expect(textInput).toHaveClass(&quot;my-class&quot;);\r\n});\r\n\r\ndescribe(&quot;placeholder&quot;, () => {\r\n  it('기본 placeholder &quot;텍스트를 입력해 주세요.&quot;가 노출된다.', async () => {\r\n    await render(<TextField />);\r\n\r\n    const textInput = screen.getByPlaceholderText(&quot;텍스트를 입력해 주세요.&quot;);\r\n\r\n    expect(textInput).toBeInTheDocument();\r\n  });\r\n\r\n  it(&quot;placeholder prop에 따라 placeholder가 변경된다.&quot;, async () => {\r\n    await render(<TextField placeholder=&quot;상품명을 입력해 주세요.&quot; />);\r\n\r\n    const textInput = screen.getByPlaceholderText(&quot;상품명을 입력해 주세요.&quot;);\r\n\r\n    expect(textInput).toBeInTheDocument();\r\n  });\r\n});\r\n\r\nit(&quot;텍스트를 입력하면 onChange prop으로 등록한 함수가 호출된다.&quot;, async () => {\r\n  const spy = vi.fn();\r\n\r\n  const { user } = await render(<TextField onChange={spy} />);\r\n\r\n  const textInput = screen.getByPlaceholderText(&quot;텍스트를 입력해 주세요.&quot;);\r\n\r\n  await user.type(textInput, &quot;test&quot;);\r\n\r\n  expect(spy).toHaveBeenCalledWith(&quot;test&quot;);\r\n});\r\n\r\nit(&quot;엔터키를 입력하면 onEnter prop으로 등록한 함수가 호출된다.&quot;, async () => {\r\n  const spy = vi.fn();\r\n\r\n  const { user } = await render(<TextField onEnter={spy} />);\r\n\r\n  const textInput = screen.getByPlaceholderText(&quot;텍스트를 입력해 주세요.&quot;);\r\n\r\n  await user.type(textInput, &quot;test{Enter}&quot;);\r\n\r\n  expect(spy).toHaveBeenCalledWith(&quot;test&quot;);\r\n});\r\n\r\nit(&quot;포커스가 활성화되면 onFocus prop으로 등록한 함수가 호출된다.&quot;, async () => {\r\n  const spy = vi.fn();\r\n  const { user } = await render(<TextField onFocus={spy} />);\r\n\r\n  const textInput = screen.getByPlaceholderText(&quot;텍스트를 입력해 주세요.&quot;);\r\n\r\n  await user.click(textInput);\r\n\r\n  expect(spy).toHaveBeenCalled();\r\n});\r\n\r\nit(&quot;포커스가 활성화되면 border 스타일이 추가된다.&quot;, async () => {\r\n  const { user } = await render(<TextField />);\r\n\r\n  const textInput = screen.getByPlaceholderText(&quot;텍스트를 입력해 주세요.&quot;);\r\n\r\n  await user.click(textInput);\r\n\r\n  expect(textInput).toHaveStyle({\r\n    borderWidth: 2,\r\n    borderColor: &quot;rgb(25, 118, 210)&quot;\r\n  });\r\n});`, `1893550481304617700`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className prop으로 설정한 css class가 적용된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>TextField className<span class=\"token operator\">=</span><span class=\"token string\">\"my-class\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByPlaceholderText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"텍스트를 입력해 주세요.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>textInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"placeholder\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'기본 placeholder \"텍스트를 입력해 주세요.\"가 노출된다.'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>TextField <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByPlaceholderText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"텍스트를 입력해 주세요.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>textInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"placeholder prop에 따라 placeholder가 변경된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>TextField placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"상품명을 입력해 주세요.\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByPlaceholderText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"상품명을 입력해 주세요.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>textInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"텍스트를 입력하면 onChange prop으로 등록한 함수가 호출된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> spy <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>TextField onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>spy<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByPlaceholderText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"텍스트를 입력해 주세요.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>textInput<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"엔터키를 입력하면 onEnter prop으로 등록한 함수가 호출된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> spy <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>TextField onEnter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>spy<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByPlaceholderText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"텍스트를 입력해 주세요.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>textInput<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test{Enter}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포커스가 활성화되면 onFocus prop으로 등록한 함수가 호출된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> spy <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>TextField onFocus<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>spy<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByPlaceholderText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"텍스트를 입력해 주세요.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>textInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포커스가 활성화되면 border 스타일이 추가된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>TextField <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByPlaceholderText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"텍스트를 입력해 주세요.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>textInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>textInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">borderWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">borderColor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(25, 118, 210)\"</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"3-외부-모듈을-포함한-컴포넌트-단위-테스트\" style=\"position:relative;\"><a href=\"#3-%EC%99%B8%EB%B6%80-%EB%AA%A8%EB%93%88%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"3 외부 모듈을 포함한 컴포넌트 단위 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 외부 모듈을 포함한 컴포넌트 단위 테스트</h2>\n<p><code class=\"language-text\">react-router-dom</code>의 <code class=\"language-text\">useNavigate</code>를 사용하는 컴포넌트를 테스트하는 경우 특정 이벤트로 <code class=\"language-text\">useNavigate</code>가 제대로 호출되었는지 확인하며 <code class=\"language-text\">useNavigate</code> 자체를 테스트하는 것은 아니다.</p>\n<p>즉, 단위 테스트에서 외부 모듈에 대한 검증은 분리하며 특정 이벤트로 외부 모듈이 제대로 호출되었는지만 확인</p>\n<h3 id=\"1-모킹\" style=\"position:relative;\"><a href=\"#1-%EB%AA%A8%ED%82%B9\" aria-label=\"1 모킹 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 모킹</h3>\n<p>모킹이란 실제 모듈을 대체하는 모의 모듈을 사용하는 것</p>\n<ul>\n<li>장점\n<ul>\n<li>외부 모듈과 의존성을 끊어 테스트를 독립적으로 수행</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>실제 모듈과 동일한 모듈 구현이 큰 비용이 들어감</li>\n<li>신뢰성 낮음</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-모킹-방법\" style=\"position:relative;\"><a href=\"#2-%EB%AA%A8%ED%82%B9-%EB%B0%A9%EB%B2%95\" aria-label=\"2 모킹 방법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 모킹 방법</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"31452694073074717000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`const navigateFn = vi.fn(); // 호출 여부 확인을 위한 스파이 함수\r\n\r\n// react-router-dom 모듈을 다음과 같은 콜백 함수로 대체\r\nvi.mock(&quot;react-router-dom&quot;, async () => {\r\n  // 실제 모듈을 그대로 가져옴\r\n  const original = await vi.importActual(&quot;react-router-dom&quot;);\r\n\r\n  return {\r\n    ...original,\r\n    useNavigate: () => navigateFn // 그 중 검증해야할 useNavigate만 스파이 함수로 대체\r\n  };\r\n});\r\n\r\nit(&quot;Home으로 이동 버튼 클릭시 홈 경로로 이동하는 navigate가 실행된다&quot;, async () => {\r\n  const { user } = await render(<NotFoundPage />);\r\n\r\n  const button = await screen.getByRole(&quot;button&quot;, { name: &quot;Home으로 이동&quot; });\r\n\r\n  await user.click(button);\r\n\r\n  expect(navigateFn).toHaveBeenNthCalledWith(1, &quot;/&quot;, { replace: true });\r\n});`, `31452694073074717000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> navigateFn <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 호출 여부 확인을 위한 스파이 함수</span>\r\n\r\n<span class=\"token comment\">// react-router-dom 모듈을 다음과 같은 콜백 함수로 대체</span>\r\nvi<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// 실제 모듈을 그대로 가져옴</span>\r\n  <span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">importActual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>original<span class=\"token punctuation\">,</span>\r\n    <span class=\"token function-variable function\">useNavigate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> navigateFn <span class=\"token comment\">// 그 중 검증해야할 useNavigate만 스파이 함수로 대체</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Home으로 이동 버튼 클릭시 홈 경로로 이동하는 navigate가 실행된다\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>NotFoundPage <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Home으로 이동\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>navigateFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenNthCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">replace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"3-모킹-초기화\" style=\"position:relative;\"><a href=\"#3-%EB%AA%A8%ED%82%B9-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"3 모킹 초기화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 모킹 초기화</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"94150586675560580000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`// setupTest.js\r\n\r\nafterEach(() => {\r\n  // 모킹된 모듈의 구현은 유지 => 각 파일 내에서는 모킹된 모듈을 계속 사용\r\n  // 단, 모킹 히스토리(호출 횟수, 호출 인자 등)는 초기화 하여 독립적인 테스트 수행\r\n  vi.clearAllMocks();\r\n});\r\n\r\nafterAll(() => {\r\n  // 모킹된 모듈의 구현 자체를 초기화 => 테스트 파일간 모킹된 모듈은 별개\r\n  vi.resetAllMocks();\r\n});`, `94150586675560580000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// setupTest.js</span>\r\n\r\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// 모킹된 모듈의 구현은 유지 => 각 파일 내에서는 모킹된 모듈을 계속 사용</span>\r\n  <span class=\"token comment\">// 단, 모킹 히스토리(호출 횟수, 호출 인자 등)는 초기화 하여 독립적인 테스트 수행</span>\r\n  vi<span class=\"token punctuation\">.</span><span class=\"token function\">clearAllMocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// 모킹된 모듈의 구현 자체를 초기화 => 테스트 파일간 모킹된 모듈은 별개</span>\r\n  vi<span class=\"token punctuation\">.</span><span class=\"token function\">resetAllMocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"4-리액트-훅-단위-테스트\" style=\"position:relative;\"><a href=\"#4-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%9B%85-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"4 리액트 훅 단위 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 리액트 훅 단위 테스트</h2>\n<h3 id=\"1-테스트-대상-커스텀-훅\" style=\"position:relative;\"><a href=\"#1-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85\" aria-label=\"1 테스트 대상 커스텀 훅 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 테스트 대상 커스텀 훅</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"45621178545168876000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`const useConfirmModal = (initialValue = false) => {\r\n  const [isModalOpened, setIsModalOpened] = useState(initialValue);\r\n\r\n  const toggleIsModalOpened = () => {\r\n    setIsModalOpened(!isModalOpened);\r\n  };\r\n\r\n  return {\r\n    toggleIsModalOpened,\r\n    isModalOpened\r\n  };\r\n};\r\n\r\nexport default useConfirmModal;`, `45621178545168876000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useConfirmModal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialValue <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isModalOpened<span class=\"token punctuation\">,</span> setIsModalOpened<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleIsModalOpened</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setIsModalOpened</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isModalOpened<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n    toggleIsModalOpened<span class=\"token punctuation\">,</span>\r\n    isModalOpened\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useConfirmModal<span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트 하고자하는 기능</p>\n<ol>\n<li>호출 시 initialValue 인자를 지정하지 않은 경우 isModalOpened의 초기값은 false</li>\n<li>호출 시 initialValue 인자를 boolean 타입으로 지정한 경우 해당 값으로 isModalOpened의 초기값이 설정</li>\n<li>toggleIsModalOpened 함수를 호출하면 isModalOpened의 값이 반전</li>\n</ol>\n<h3 id=\"2-테스트-코드-1\" style=\"position:relative;\"><a href=\"#2-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-1\" aria-label=\"2 테스트 코드 1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 테스트 코드</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"40927921842748380000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`it(&quot;호출 시 initialValue 인자를 지정하지 않는 경우 isModalOpened 상태가 false로 설정된다.&quot;, () => {\r\n  // 컴포넌트 렌더링 없이 훅만 테스트를 위한 renderHook 사용\r\n  const { result } = renderHook(useConfirmModal);\r\n\r\n  expect(result.current.isModalOpened).toBe(false);\r\n});\r\n\r\nit(&quot;호출 시 initialValue 인자를 boolean 값으로 지정하는 경우 해당 값으로 isModalOpened 상태가 설정된다.&quot;, () => {\r\n  const { result } = renderHook(() => useConfirmModal(true));\r\n\r\n  expect(result.current.isModalOpened).toBe(true);\r\n});\r\n\r\nit(&quot;훅의 toggleIsModalOpened()를 호출하면 isModalOpened 상태가 toggle된다.&quot;, () => {\r\n  const { result } = renderHook(useConfirmModal);\r\n\r\n  // act 함수를 사용하여 훅의 상태 업데이트를 JSDOM에 반영\r\n  act(() => {\r\n    result.current.toggleIsModalOpened();\r\n  });\r\n\r\n  expect(result.current.isModalOpened).toBe(true);\r\n});`, `40927921842748380000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"호출 시 initialValue 인자를 지정하지 않는 경우 isModalOpened 상태가 false로 설정된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// 컴포넌트 렌더링 없이 훅만 테스트를 위한 renderHook 사용</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">renderHook</span><span class=\"token punctuation\">(</span>useConfirmModal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>isModalOpened<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"호출 시 initialValue 인자를 boolean 값으로 지정하는 경우 해당 값으로 isModalOpened 상태가 설정된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">renderHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useConfirmModal</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>isModalOpened<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"훅의 toggleIsModalOpened()를 호출하면 isModalOpened 상태가 toggle된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">renderHook</span><span class=\"token punctuation\">(</span>useConfirmModal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// act 함수를 사용하여 훅의 상태 업데이트를 JSDOM에 반영</span>\r\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    result<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">toggleIsModalOpened</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>isModalOpened<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">act</code> 함수는 테스트 환경에서 컴포넌트의 렌더링과 상태 업데이트를 <code class=\"language-text\">JSDOM</code>에 반영하기 위해 사용한다, 앞선 컴포넌트 테스트에서 <code class=\"language-text\">render</code>, <code class=\"language-text\">user-event</code>는 내부적으로 <code class=\"language-text\">act</code>를 사용하고 있으므로 별도로 사용하지 않음</p>\n<p>단, 위 처럼 <code class=\"language-text\">state</code>를 업데이트하여 검증하는 경우 <code class=\"language-text\">act</code>를 사용하여 <code class=\"language-text\">state</code>반영이 필요</p>\n<h2 id=\"5-타이머-관련-단위-테스트\" style=\"position:relative;\"><a href=\"#5-%ED%83%80%EC%9D%B4%EB%A8%B8-%EA%B4%80%EB%A0%A8-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"5 타이머 관련 단위 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 타이머 관련 단위 테스트</h2>\n<h3 id=\"1-테스트-대상-유틸-함수\" style=\"position:relative;\"><a href=\"#1-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81-%EC%9C%A0%ED%8B%B8-%ED%95%A8%EC%88%98\" aria-label=\"1 테스트 대상 유틸 함수 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 테스트 대상 유틸 함수</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"20859970590761787000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`export const debounce = (fn, wait) => {\r\n  let timeout = null;\r\n\r\n  return (...args) => {\r\n    const later = () => {\r\n      timeout = -1;\r\n      fn(...args);\r\n    };\r\n\r\n    if (timeout) {\r\n      clearTimeout(timeout);\r\n    }\r\n    timeout = window.setTimeout(later, wait);\r\n  };\r\n};`, `20859970590761787000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">let</span> timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">later</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      timeout <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    timeout <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>later<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트 하고자하는 기능</p>\n<ol>\n<li>특정 시간이 지난 후에 함수가 실행</li>\n<li>함수가 여러 번 호출되면 마지막 호출 시점으로부터 특정 시간이 지난 후에 함수가 실행</li>\n</ol>\n<h3 id=\"2-테스트-코드-2\" style=\"position:relative;\"><a href=\"#2-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-2\" aria-label=\"2 테스트 코드 2 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 테스트 코드</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"9705236808814166000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`describe(&quot;debounce&quot;, () => {\r\n  beforeEach(() => {\r\n    // 타이머 조작을 위해 사용\r\n    vi.useFakeTimers();\r\n\r\n    // 필요한 경우 시간을 고정하여 일관된 테스트 수행 가능\r\n    // vi.setSystemTime(new Date('2021-01-01T00:00:00.000Z'));\r\n  });\r\n\r\n  afterEach(() => {\r\n    // 테스트 끝나면 원래대로 돌려놓음\r\n    vi.useRealTimers();\r\n  });\r\n\r\n  it(&quot;특정 시간이 지난 후 함수가 호출된다.&quot;, () => {\r\n    const spy = vi.fn();\r\n\r\n    const debouncedFn = debounce(spy, 300);\r\n\r\n    debouncedFn();\r\n\r\n    // 300ms를 흐르도록 타이머 설정\r\n    vi.advanceTimersByTime(300);\r\n\r\n    expect(spy).toHaveBeenCalled();\r\n  });\r\n\r\n  it(&quot;연이어 호출해도 마지막 호출 기준으로 지정된 타이머 시간이 지난 경우에만 함수가 호출된다.&quot;, () => {\r\n    const spy = vi.fn();\r\n\r\n    const debouncedFn = debounce(spy, 300);\r\n\r\n    debouncedFn();\r\n\r\n    vi.advanceTimersByTime(200);\r\n    debouncedFn();\r\n\r\n    vi.advanceTimersByTime(100);\r\n    debouncedFn();\r\n\r\n    vi.advanceTimersByTime(200);\r\n    debouncedFn();\r\n\r\n    // 여기서만 마지막 호출 기준으로 300ms가 지난 상태이므로 실행\r\n    vi.advanceTimersByTime(300);\r\n    debouncedFn();\r\n\r\n    expect(spy).toHaveBeenCalledTimes(1);\r\n  });\r\n});`, `9705236808814166000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debounce\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// 타이머 조작을 위해 사용</span>\r\n    vi<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 필요한 경우 시간을 고정하여 일관된 테스트 수행 가능</span>\r\n    <span class=\"token comment\">// vi.setSystemTime(new Date('2021-01-01T00:00:00.000Z'));</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// 테스트 끝나면 원래대로 돌려놓음</span>\r\n    vi<span class=\"token punctuation\">.</span><span class=\"token function\">useRealTimers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"특정 시간이 지난 후 함수가 호출된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> spy <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> debouncedFn <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">debouncedFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 300ms를 흐르도록 타이머 설정</span>\r\n    vi<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"연이어 호출해도 마지막 호출 기준으로 지정된 타이머 시간이 지난 경우에만 함수가 호출된다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> spy <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> debouncedFn <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">debouncedFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    vi<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">debouncedFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    vi<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">debouncedFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    vi<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">debouncedFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 여기서만 마지막 호출 기준으로 300ms가 지난 상태이므로 실행</span>\r\n    vi<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">debouncedFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#0-%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\">0. 들어가며</a></p>\n</li>\n<li>\n<p><a href=\"#1-fe%EC%97%90%EC%84%9C-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%9E%80\">1. FE에서 단위 테스트란?</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81-%EC%84%A0%EC%A0%95\">2. 단위 테스트 대상 선정</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EA%B3%B5%ED%86%B5-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\">2. 공통 컴포넌트 단위 테스트</a></p>\n<ul>\n<li><a href=\"#1-render-%EC%BB%A4%EC%8A%A4%ED%85%80\">(1) render 커스텀</a></li>\n<li><a href=\"#2-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\">(2) 테스트 코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EC%99%B8%EB%B6%80-%EB%AA%A8%EB%93%88%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\">3. 외부 모듈을 포함한 컴포넌트 단위 테스트</a></p>\n<ul>\n<li><a href=\"#1-%EB%AA%A8%ED%82%B9\">(1) 모킹</a></li>\n<li><a href=\"#2-%EB%AA%A8%ED%82%B9-%EB%B0%A9%EB%B2%95\">(2) 모킹 방법</a></li>\n<li><a href=\"#3-%EB%AA%A8%ED%82%B9-%EC%B4%88%EA%B8%B0%ED%99%94\">(3) 모킹 초기화</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%9B%85-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\">4. 리액트 훅 단위 테스트</a></p>\n<ul>\n<li><a href=\"#1-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85\">(1) 테스트 대상 커스텀 훅</a></li>\n<li><a href=\"#2-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-1\">(2) 테스트 코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#5-%ED%83%80%EC%9D%B4%EB%A8%B8-%EA%B4%80%EB%A0%A8-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\">5. 타이머 관련 단위 테스트</a></p>\n<ul>\n<li><a href=\"#1-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81-%EC%9C%A0%ED%8B%B8-%ED%95%A8%EC%88%98\">(1) 테스트 대상 유틸 함수</a></li>\n<li><a href=\"#2-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-2\">(2) 테스트 코드</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"FE 단위 테스트","date":"2023년 12월 23일","tags":["FE","Test"]}}}]}},"pageContext":{"slug":"/lecture/프론트엔드 테스트/2023-12-23-FE-단위-테스트/","previous":{"fields":{"slug":"/lecture/프론트엔드 테스트/2023-12-23-Vitest-With-Testing-Library/"},"frontmatter":{"categories":["프론트엔드 테스트"],"title":"Vitest With Testing Library","date":"2023-12-23 01:00:00 +0900","tags":["FE","Test"]}},"next":{"fields":{"slug":"/lecture/프론트엔드 테스트/2024-01-07-FE-통합-테스트/"},"frontmatter":{"categories":["프론트엔드 테스트"],"title":"FE 통합 테스트","date":"2024-01-07 01:00:00 +0900","tags":["FE","Test"]}}}},"staticQueryHashes":[],"slicesMap":{}}