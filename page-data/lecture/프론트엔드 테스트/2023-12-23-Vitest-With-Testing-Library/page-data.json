{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/프론트엔드 테스트/2023-12-23-Vitest-With-Testing-Library/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"0-들어가며\" style=\"position:relative;\"><a href=\"#0-%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"0 들어가며 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 들어가며</h2>\n<p>vitest와 testing-library의 사용법 정리</p>\n<h2 id=\"1-jsdom\" style=\"position:relative;\"><a href=\"#1-jsdom\" aria-label=\"1 jsdom permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. JSDOM</h2>\n<p><code class=\"language-text\">Jest</code> 및 <code class=\"language-text\">Vitest</code>와 같은 단위 테스트를 위한 테스트 프레임 워크는 <code class=\"language-text\">node.js</code> 환경에서 실행되기 때문에 <code class=\"language-text\">DOM</code>을 사용할 수 없다. 따라서 <code class=\"language-text\">JSDOM</code>을 사용하여 <code class=\"language-text\">DOM</code>을 가상으로 구현한다.<br>\n<code class=\"language-text\">JSDOM</code>은 실제 <code class=\"language-text\">DOM</code>을 모방한 것이므로 완벽하게 일치하지는 않는다, 하지만 브라우저에 비해 빠르게 테스트를 실행할 수 있다.</p>\n<h2 id=\"2-vitest-설정-및-사용법\" style=\"position:relative;\"><a href=\"#2-vitest-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"2 vitest 설정 및 사용법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Vitest 설정 및 사용법</h2>\n<h3 id=\"1-viteconfigjs-설정\" style=\"position:relative;\"><a href=\"#1-viteconfigjs-%EC%84%A4%EC%A0%95\" aria-label=\"1 viteconfigjs 설정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) vite.config.js 설정</h3>\n<p><code class=\"language-text\">vite.config.js</code> 에서 <code class=\"language-text\">test</code> 키를 추가하여 설정</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"90196659654079900000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`export default defineConfig({\r\n  plugins: [react(), eslint({ exclude: [&quot;/virtual:/**&quot;, &quot;node_modules/**&quot;] })],\r\n  test: {\r\n    globals: true, // vi.fn() 처럼 매번 vi를 붙이지 않고 사용할 수 있게 해준다.\r\n    environment: &quot;jsdom&quot;, // jsdom 환경에서 테스트를 실행한다.\r\n    setupFiles: &quot;./src/utils/test/setupTests.js&quot; // 테스트 셋업 파일 경로\r\n  },\r\n  resolve: {\r\n    alias: [{ find: &quot;@&quot;, replacement: path.resolve(__dirname, &quot;src&quot;) }]\r\n  }\r\n});`, `90196659654079900000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">react</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eslint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/virtual:/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"node_modules/**\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">globals</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// vi.fn() 처럼 매번 vi를 붙이지 않고 사용할 수 있게 해준다.</span>\r\n    <span class=\"token literal-property property\">environment</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jsdom\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// jsdom 환경에서 테스트를 실행한다.</span>\r\n    <span class=\"token literal-property property\">setupFiles</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/utils/test/setupTests.js\"</span> <span class=\"token comment\">// 테스트 셋업 파일 경로</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">find</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">replacement</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"2-setuptestsjs-설정\" style=\"position:relative;\"><a href=\"#2-setuptestsjs-%EC%84%A4%EC%A0%95\" aria-label=\"2 setuptestsjs 설정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) setupTests.js 설정</h3>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"66375167264657660000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`import &quot;@testing-library/jest-dom&quot;; // matcher 확장\r\n\r\n// 프로젝트 전체 모듈 단위로 setup, teardown을 설정\r\nafterEach(() => {\r\n  vi.clearAllMocks();\r\n});\r\n\r\nafterAll(() => {\r\n  vi.resetAllMocks();\r\n});\r\n\r\n// matchMedia라는 브라우저 API를 사용하는 경우, JSDOM에서는 지원하지 않으므로 모킹해준다.\r\nObject.defineProperty(window, &quot;matchMedia&quot;, {\r\n  writable: true,\r\n  value: vi.fn().mockImplementation((query) => ({\r\n    matches: false,\r\n    media: query,\r\n    onchange: null,\r\n    addListener: vi.fn(), // Deprecated\r\n    removeListener: vi.fn(), // Deprecated\r\n    addEventListener: vi.fn(),\r\n    removeEventListener: vi.fn(),\r\n    dispatchEvent: vi.fn()\r\n  }))\r\n});`, `66375167264657660000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"@testing-library/jest-dom\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// matcher 확장</span>\r\n\r\n<span class=\"token comment\">// 프로젝트 전체 모듈 단위로 setup, teardown을 설정</span>\r\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  vi<span class=\"token punctuation\">.</span><span class=\"token function\">clearAllMocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  vi<span class=\"token punctuation\">.</span><span class=\"token function\">resetAllMocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// matchMedia라는 브라우저 API를 사용하는 경우, JSDOM에서는 지원하지 않으므로 모킹해준다.</span>\r\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">\"matchMedia\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">query</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">matches</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">media</span><span class=\"token operator\">:</span> query<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">onchange</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">addListener</span><span class=\"token operator\">:</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Deprecated</span>\r\n    <span class=\"token literal-property property\">removeListener</span><span class=\"token operator\">:</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Deprecated</span>\r\n    <span class=\"token literal-property property\">addEventListener</span><span class=\"token operator\">:</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">removeEventListener</span><span class=\"token operator\">:</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">dispatchEvent</span><span class=\"token operator\">:</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"3-vitest-matcher\" style=\"position:relative;\"><a href=\"#3-vitest-matcher\" aria-label=\"3 vitest matcher permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) Vitest Matcher</h3>\n<p><code class=\"language-text\">toBe</code>, <code class=\"language-text\">toHaveProperty</code>, <code class=\"language-text\">toThrowError</code> 등 다양한 matcher를 제공한다.<br>\n하지만 <code class=\"language-text\">DOM</code> 검증을 위한 matcher는 제공하지 않으므로</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"46493938194642650000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`import &quot;@testing-library/jest-dom&quot;; // matcher 확장`, `46493938194642650000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"@testing-library/jest-dom\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// matcher 확장</span></code></pre></div>\n<p>이 코드를 통해 <code class=\"language-text\">DOM</code> 검증을 위한 matcher를 확장해야 한다.</p>\n<blockquote>\n<p>DOM 검증을 위한 matcher의 예시\r\ntoHaveTextContent, toHaveAttribute, toHaveStyle, toHaveClass, toBeInTheDocument</p>\n</blockquote>\n<h3 id=\"2-setup-teardown\" style=\"position:relative;\"><a href=\"#2-setup-teardown\" aria-label=\"2 setup teardown permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) setup, teardown</h3>\n<ul>\n<li><code class=\"language-text\">setup</code> : 테스트 실행 전에 수행해야 할 작업</li>\n<li><code class=\"language-text\">teardown</code> : 테스트 실행 후에 수행해야 할 작업</li>\n</ul>\n<p>선언위치에 따라 다르게 동작한다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"94591250121237920000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`beforeEach(() => { // A-test, B-test 전에 각각 한번씩\r\n  ...\r\n});\r\n\r\ndescribe(&quot;A-test&quot;, () => {\r\n  beforeEach(() => { // A-test 내부에서 선언되었으므로 A-test1, A-test2에 각각 한번씩\r\n    ...\r\n  });\r\n\r\n  it(&quot;A-test1&quot;, () => {\r\n    ...\r\n  });\r\n\r\n  it(&quot;A-test2&quot;, () => {\r\n    ...\r\n  });\r\n});\r\n\r\nit(&quot;B-test&quot;, () => {\r\n  ...\r\n});`, `94591250121237920000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// A-test, B-test 전에 각각 한번씩</span>\r\n  <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A-test\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// A-test 내부에서 선언되었으므로 A-test1, A-test2에 각각 한번씩</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A-test1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A-test2\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B-test\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>또한 겹치는 경우 다음과 같은 순서로 동작</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"17316516184264552000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"📋  코드를 복사했습니다.\"\n              data-toaster-duration=\"3000\"\n              onClick=\"copyToClipboard(`beforeEach(() => {\r\n  ...\r\n});\r\n\r\nbeforeAll(() => {\r\n  ...\r\n});\r\n\r\ndescribe(&quot;A-test&quot;, () => {\r\n  beforeEach(() => {\r\n    ...\r\n  });\r\n\r\n  it(&quot;A-test1&quot;, () => {\r\n    ...\r\n  });\r\n\r\n});`, `17316516184264552000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                copy<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"h-4 w-4\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A-test\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A-test1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>root의 <code class=\"language-text\">beforeAll</code></li>\n<li>root의 <code class=\"language-text\">beforeEach</code></li>\n<li><code class=\"language-text\">A-test</code>내부의 <code class=\"language-text\">beforeEach</code><br>\n이후 <code class=\"language-text\">afterEach</code>, <code class=\"language-text\">afterAll</code>은 비슷한 논리로 root의 <code class=\"language-text\">afterEach</code>, <code class=\"language-text\">afterAll</code>이 가장 마지막에 실행된다(수미상관)</li>\n</ol>\n<p>프로젝트 전체의 테스트에 대하여 <code class=\"language-text\">setup</code>, <code class=\"language-text\">teardown</code>을 설정하고 싶다면 <code class=\"language-text\">vite.config.js</code>에서 설정</p>\n<blockquote>\n<p>setup, teardown에서 전역 변수 사용은 독립성을 보장하지 못하므로 지양</p>\n</blockquote>\n<h2 id=\"3-testing-library란\" style=\"position:relative;\"><a href=\"#3-testing-library%EB%9E%80\" aria-label=\"3 testing library란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Testing Library란?</h2>\n<p>UI 컴포넌트 테스트를 위한 라이브러리, 사용자가 사용하는 방식으로 테스트 하자는 철학을 가지고 있다.<br>\n<code class=\"language-text\">(DOM을 쿼리(조회)하고 사용자의 행동을 시뮬레이션하고 결과를 검증)</code></p>\n<h3 id=\"1-testing-library-쿼리\" style=\"position:relative;\"><a href=\"#1-testing-library-%EC%BF%BC%EB%A6%AC\" aria-label=\"1 testing library 쿼리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) Testing Library 쿼리</h3>\n<p>어떤 것을 기준으로 조회할지 다양한 방법이 있지만 공식문서에서 추천하는 우선순위는 실제 유저와 가장 유사한 방식을 따르는 쿼리를 사용하는 것이다.</p>\n<ol>\n<li><code class=\"language-text\">Queries Accessible to Everyone</code> : <code class=\"language-text\">getByRole</code>, <code class=\"language-text\">getByLabelText</code>, <code class=\"language-text\">getByPlaceholderText</code>, <code class=\"language-text\">getByText</code>, <code class=\"language-text\">getByDisplayValue</code></li>\n<li><code class=\"language-text\">Semantic Queries</code> : <code class=\"language-text\">getByAltText</code>, <code class=\"language-text\">getByTitle</code></li>\n<li><code class=\"language-text\">Test ID</code> : <code class=\"language-text\">getByTestId</code></li>\n</ol>\n<ul>\n<li>쿼리 종류</li>\n</ul>\n<p><img src=\"https://github.com/Jeongseulho/Jeongseulho/assets/110578739/57fefc63-bed5-4e75-a86b-75b7a9b3b5c1\" alt=\"image\"></p>\n<ul>\n<li>각 쿼리의 상세 설명</li>\n</ul>\n<p><img src=\"https://github.com/Jeongseulho/Jeongseulho/assets/110578739/4d90825d-a95d-4482-9e97-ded31c03f0dd\" alt=\"image\"></p>\n<h3 id=\"2-user-event와-fireevent의-차이\" style=\"position:relative;\"><a href=\"#2-user-event%EC%99%80-fireevent%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"2 user event와 fireevent의 차이 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) user-event와 fireEvent의 차이</h3>\n<ul>\n<li><code class=\"language-text\">user-event</code> : 실제 유저가 사용하는 방식으로 시뮬레이션, 버튼에 click 이벤트를 발생시키면 click 전에 mouseover, focus 등 이벤트가 연쇄적으로 발생한다.</li>\n<li><code class=\"language-text\">fireEvent</code> : 프로그램으로 DOM을 조작하는 방식으로 시뮬레이션, 버튼에 click 이벤트를 발생시키면 click만 발생한다.</li>\n</ul>\n<p><code class=\"language-text\">user-event</code>를 사용하여 최대한 실제 유저가 사용하는 방식으로 테스트를 진행하는 것이 좋다. <code class=\"language-text\">fireEvent</code>를 사용한다면 단위 테스트에서는 그저 <code class=\"language-text\">onClick</code>으로 제대로 함수가 전달되었는지 검증하는 <code class=\"language-text\">React</code>자체를 못 믿고 테스트를 진행하는 것과 같다.<br>\n<code class=\"language-text\">React</code>를 테스트하는 것이 아니라 사용자의 상호작용을 테스트하자</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#0-%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\">0. 들어가며</a></p>\n</li>\n<li>\n<p><a href=\"#1-jsdom\">1. JSDOM</a></p>\n</li>\n<li>\n<p><a href=\"#2-vitest-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95\">2. Vitest 설정 및 사용법</a></p>\n<ul>\n<li><a href=\"#1-viteconfigjs-%EC%84%A4%EC%A0%95\">(1) vite.config.js 설정</a></li>\n<li><a href=\"#2-setuptestsjs-%EC%84%A4%EC%A0%95\">(2) setupTests.js 설정</a></li>\n<li><a href=\"#3-vitest-matcher\">(3) Vitest Matcher</a></li>\n<li><a href=\"#2-setup-teardown\">(2) setup, teardown</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-testing-library%EB%9E%80\">3. Testing Library란?</a></p>\n<ul>\n<li><a href=\"#1-testing-library-%EC%BF%BC%EB%A6%AC\">(1) Testing Library 쿼리</a></li>\n<li><a href=\"#2-user-event%EC%99%80-fireevent%EC%9D%98-%EC%B0%A8%EC%9D%B4\">(2) user-event와 fireEvent의 차이</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Vitest With Testing Library","date":"2023년 12월 22일","tags":["FE","Test"]}}}]}},"pageContext":{"slug":"/lecture/프론트엔드 테스트/2023-12-23-Vitest-With-Testing-Library/","previous":{"fields":{"slug":"/lecture/프론트엔드 테스트/2023-12-22-FE-테스트-개요/"},"frontmatter":{"categories":["프론트엔드 테스트"],"title":"FE 테스트 개요","date":"2023-12-22 01:00:00 +0900","tags":["FE","Test"]}},"next":{"fields":{"slug":"/lecture/프론트엔드 테스트/2023-12-23-FE-단위-테스트/"},"frontmatter":{"categories":["프론트엔드 테스트"],"title":"FE 단위 테스트","date":"2023-12-23 21:00:00 +0900","tags":["FE","Test"]}}}},"staticQueryHashes":[],"slicesMap":{}}