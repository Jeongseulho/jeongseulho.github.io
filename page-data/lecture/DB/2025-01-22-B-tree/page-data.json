{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/DB/2025-01-22-B-tree/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1 id=\"b-tree\" style=\"position:relative;\"><a href=\"#b-tree\" aria-label=\"b tree permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B tree</h1>\n<ul>\n<li>\n<p><code class=\"language-text\">BST</code>와 같은 형태에서 자식 노드가 3개 이상인 트리</p>\n</li>\n<li>\n<p>부모 노드에는 2개 이상의 키를 저장(이 키들은 <code class=\"language-text\">오름차순 정렬</code>되어 있음)</p>\n</li>\n<li>\n<p>자식 노드는 부모 노드의 키를 기준으로 자식 노드를 나눔</p>\n</li>\n<li>\n<p>자식 노드의 개수가 <code class=\"language-text\">M</code>인 <code class=\"language-text\">B tree</code>를 <code class=\"language-text\">M차 B tree</code>라고 함</p>\n</li>\n</ul>\n<p><img src=\"https://github.com/user-attachments/assets/f69a5472-0d91-4de3-ab78-15b2e2d46f13\" alt=\"Image\"></p>\n<h2 id=\"b-tree-파라미터\" style=\"position:relative;\"><a href=\"#b-tree-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\" aria-label=\"b tree 파라미터 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B tree 파라미터</h2>\n<ul>\n<li><code class=\"language-text\">M</code> : 각 노드의 최대 자식 수</li>\n<li><code class=\"language-text\">M - 1</code> : 각 노드의 최대 키 수</li>\n<li><code class=\"language-text\">Math.ceil(M / 2)</code> : 각 노드의 최소 자식 수(단, root, leaf 노드 제외)</li>\n<li><code class=\"language-text\">Math.ceil(M / 2) - 1</code> : 각 노드의 최소 키 수(단, root 노드 제외)</li>\n</ul>\n<h2 id=\"b-tree-특징\" style=\"position:relative;\"><a href=\"#b-tree-%ED%8A%B9%EC%A7%95\" aria-label=\"b tree 특징 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B tree 특징</h2>\n<ul>\n<li>모든 <code class=\"language-text\">leaf 노드</code>는 같은 레벨을 가진다 => <code class=\"language-text\">balanced tree</code></li>\n<li>검색에서 avf, worst case에서 모두 <code class=\"language-text\">O(log2 N)</code>의 시간 복잡도를 가진다 => 항상 일정한 성능을 보장</li>\n</ul>\n<h1 id=\"b-tree-삽입\" style=\"position:relative;\"><a href=\"#b-tree-%EC%82%BD%EC%9E%85\" aria-label=\"b tree 삽입 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B tree 삽입</h1>\n<ul>\n<li>항상 <code class=\"language-text\">leaf 노드</code>에 삽입(삽입 후 정렬)</li>\n<li>삽입 후 최대 키 수보다 많으면(<code class=\"language-text\">M - 1</code>)\n<ul>\n<li>가운데 키를 기준으로 좌우 노드로 키를 분리</li>\n<li>가운데 키를 부모 노드로 이동</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"b-tree-삭제\" style=\"position:relative;\"><a href=\"#b-tree-%EC%82%AD%EC%A0%9C\" aria-label=\"b tree 삭제 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B tree 삭제</h1>\n<ul>\n<li><code class=\"language-text\">internal 노드</code>를 삭제하려면 해당 노드를 <code class=\"language-text\">특정 leaf 노드</code>와 위치를 바꿈, <code class=\"language-text\">특정 leaf 노드</code>는 아래 2가지 중 하나\n<ul>\n<li>선임자(<code class=\"language-text\">predecessor</code>) : 나보다 작은 데이터들 중 가장 큰 데이터</li>\n<li>후임자(<code class=\"language-text\">successor</code>) : 나보다 큰 데이터들 중 가장 작은 데이터</li>\n</ul>\n</li>\n<li>항상 <code class=\"language-text\">leaf 노드</code>에서 삭제(삭제 후 정렬)</li>\n<li>삭제 후 최소 키 수보다 적으면(<code class=\"language-text\">Math.ceil(M / 2) - 1</code>) 재조정</li>\n</ul>\n<h1 id=\"b-tree가-db의-index로-사용되는-이유\" style=\"position:relative;\"><a href=\"#b-tree%EA%B0%80-db%EC%9D%98-index%EB%A1%9C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"b tree가 db의 index로 사용되는 이유 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B tree가 DB의 index로 사용되는 이유</h1>\n<ul>\n<li>avg, worst case에서 조회, 삽입, 삭제 모두 <code class=\"language-text\">O(log2 N)</code>의 시간 복잡도를 가짐</li>\n<li>하지만, <code class=\"language-text\">balanced BST</code> 또한 마찬가지로 조회, 삽입, 삭제의 avg, worst case에서 모두 <code class=\"language-text\">O(log2 N)</code>의 시간 복잡도를 가짐</li>\n</ul>\n<p><img src=\"https://github.com/user-attachments/assets/1e164ba8-c05d-471d-a13b-c3150d364198\" alt=\"Image\"></p>\n<h2 id=\"b-tree가-db의-index로-사용되는-이유-1\" style=\"position:relative;\"><a href=\"#b-tree%EA%B0%80-db%EC%9D%98-index%EB%A1%9C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0-1\" aria-label=\"b tree가 db의 index로 사용되는 이유 1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B tree가 DB의 index로 사용되는 이유</h2>\n<p>DB가 실제 저장되는 HDD의 2가지 특징으로 인하여 <code class=\"language-text\">B tree</code>가 사용됨</p>\n<ol>\n<li>HDD는 속도가 느리다 => 최대한 적게 접근하는 것이 성능에 좋다</li>\n<li>HDD는 데이터를 <code class=\"language-text\">block</code> 단위로 관리하므로 RAM으로 데이터를 가져올 때도 정해진 <code class=\"language-text\">block</code> 단위로 가져옴 => 이 <code class=\"language-text\">block</code>에 필요한 데이터도 필요 없는 데이터도 있다, 최대한 많은 필요한 데이터가 <code class=\"language-text\">block</code>에 들어가야 성능에 좋다</li>\n</ol>\n<p><img src=\"https://github.com/user-attachments/assets/3eb1bcbb-76d3-4ba9-a554-9b9ef5f8427c\" alt=\"Image\">\r\n<img src=\"https://github.com/user-attachments/assets/d78e84c8-d40d-4a1c-9911-cfff1b6ba501\" alt=\"Image\"></p>\n<ul>\n<li><code class=\"language-text\">B tree</code>는 <code class=\"language-text\">BST</code>에 비하여 레벨이 적다 => 더 적은 접근 횟수로 데이터를 찾을 확률이 높다.</li>\n<li><code class=\"language-text\">B tee</code>는 <code class=\"language-text\">BST</code>에 비하여 한 노드에 더 많은 데이터가 있다 => 한 <code class=\"language-text\">block</code>에 더 많은 데이터를 가져올 확률이 높다.</li>\n</ul>\n<blockquote>\n<p>위 그림의 상황은 각 노드들이 다른 <code class=\"language-text\">block</code>에 저장되어 있는 상황</p>\n</blockquote>\n<h2 id=\"101차-b-tree의-예시\" style=\"position:relative;\"><a href=\"#101%EC%B0%A8-b-tree%EC%9D%98-%EC%98%88%EC%8B%9C\" aria-label=\"101차 b tree의 예시 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>101차 B tree의 예시</h2>\n<p><img src=\"https://github.com/user-attachments/assets/259ea316-796b-486a-b6d1-e33d6c269e94\" alt=\"Image\"></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#b-tree\">B tree</a></p>\n<ul>\n<li><a href=\"#b-tree-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\">B tree 파라미터</a></li>\n<li><a href=\"#b-tree-%ED%8A%B9%EC%A7%95\">B tree 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#b-tree-%EC%82%BD%EC%9E%85\">B tree 삽입</a></p>\n</li>\n<li>\n<p><a href=\"#b-tree-%EC%82%AD%EC%A0%9C\">B tree 삭제</a></p>\n</li>\n<li>\n<p><a href=\"#b-tree%EA%B0%80-db%EC%9D%98-index%EB%A1%9C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">B tree가 DB의 index로 사용되는 이유</a></p>\n<ul>\n<li><a href=\"#b-tree%EA%B0%80-db%EC%9D%98-index%EB%A1%9C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0-1\">B tree가 DB의 index로 사용되는 이유</a></li>\n<li><a href=\"#101%EC%B0%A8-b-tree%EC%9D%98-%EC%98%88%EC%8B%9C\">101차 B tree의 예시</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"B tree","date":"2025년 01월 22일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/DB/2025-01-22-B-tree/","previous":{"fields":{"slug":"/lecture/DB/2025-01-21-인덱스/"},"frontmatter":{"categories":["DB"],"title":"인덱스","date":"2025-01-21 18:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/DB/2025-01-23-DB-분산/"},"frontmatter":{"categories":["DB"],"title":"DB 분산","date":"2025-01-23 18:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}