{"componentChunkName":"component---src-templates-lecture-template-tsx","path":"/lecture/DB/2025-01-17-MVCC/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1 id=\"mvccmulti-version-concurrency-control\" style=\"position:relative;\"><a href=\"#mvccmulti-version-concurrency-control\" aria-label=\"mvccmulti version concurrency control permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVCC(Multi-Version Concurrency Control)</h1>\n<ul>\n<li>기존의 <code class=\"language-text\">lock</code> 방식은 <code class=\"language-text\">write lock</code>에서 다른 트랜잭션이 아무것도 못함 => 성능 저하</li>\n<li><code class=\"language-text\">MVCC</code>는 <code class=\"language-text\">write lock</code>을 갖고 있어도 다른 트랜잭션에서 읽기는 가능</li>\n<li>실제 RDBMS는 <code class=\"language-text\">MVCC</code>와 <code class=\"language-text\">lock</code>을 함께 사용함</li>\n</ul>\n<p><img src=\"https://github.com/user-attachments/assets/76c1784d-69e1-4122-9751-1efc2f0663f8\" alt=\"Image\"></p>\n<ul>\n<li><code class=\"language-text\">MVCC</code>는 read에서 특정 시점 기준으로 커밋된 데이터를 읽으며 이 시점을 기준으로 세부적으로 나뉨</li>\n<li>여러 시점을 기준으로 하기 때문에 write 이력(데이터 변경 이력)을 추가로 관리해야함</li>\n</ul>\n<h2 id=\"read-committed-격리-레벨의-mvcc\" style=\"position:relative;\"><a href=\"#read-committed-%EA%B2%A9%EB%A6%AC-%EB%A0%88%EB%B2%A8%EC%9D%98-mvcc\" aria-label=\"read committed 격리 레벨의 mvcc permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>read committed 격리 레벨의 MVCC</h2>\n<ul>\n<li>read하는 시간 기준으로 커밋된 데이터를 읽음음</li>\n</ul>\n<p><img src=\"https://github.com/user-attachments/assets/d6170d3a-1c0d-4e5c-9f7a-0faf5990b52d\" alt=\"Image\"></p>\n<h2 id=\"repeatable-read-격리-레벨의-mvcc\" style=\"position:relative;\"><a href=\"#repeatable-read-%EA%B2%A9%EB%A6%AC-%EB%A0%88%EB%B2%A8%EC%9D%98-mvcc\" aria-label=\"repeatable read 격리 레벨의 mvcc permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>repeatable read 격리 레벨의 MVCC</h2>\n<ul>\n<li>read operation의 트랜잭션 시작 시점의 데이터를 읽음</li>\n</ul>\n<p><img src=\"https://github.com/user-attachments/assets/8c46d9cf-b8bc-4036-8c6a-c0cf746c1835\" alt=\"Image\"></p>\n<blockquote>\n<p>여기서 트랜잭션 시작 시점이라고 했지만, RDBMS마다 다름\r\n트랜잭션 안에서 다른 최초 read의 시점인 경우\r\n트랜잭션 안에서 다른 최초의 해당 데이터에 접근하는(read, write) 시점인 경우</p>\n</blockquote>\n<h2 id=\"read-uncommitted-격리-레벨의-mvcc\" style=\"position:relative;\"><a href=\"#read-uncommitted-%EA%B2%A9%EB%A6%AC-%EB%A0%88%EB%B2%A8%EC%9D%98-mvcc\" aria-label=\"read uncommitted 격리 레벨의 mvcc permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>read uncommitted 격리 레벨의 MVCC</h2>\n<ul>\n<li><code class=\"language-text\">MYSQL</code> : <code class=\"language-text\">MVCC</code> 미적용</li>\n<li><code class=\"language-text\">postgresql</code> : 지칭은 <code class=\"language-text\">read uncommitted</code>이지만 <code class=\"language-text\">read committed</code>로 동작</li>\n</ul>\n<h1 id=\"트랜잭션과-격리-레벨\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EA%B3%BC-%EA%B2%A9%EB%A6%AC-%EB%A0%88%EB%B2%A8\" aria-label=\"트랜잭션과 격리 레벨 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트랜잭션과 격리 레벨</h1>\n<ul>\n<li>트랜잭션마다 다른 격리 레벨을 지정할 수 있음</li>\n<li>격리 레벨의 조합과 실제 요청 순서, 상황에 따라 다양한 결과가 나오며 의도치 않은 결과가 나올 수 있음</li>\n<li>중요한 트랜잭션의 격리 레벨을 높여도 같이 진행되는 다른 트랜잭션의 격리 레벨이 낮으면 의도하지 않은 결과가 나올 수 있음</li>\n<li>또한 <code class=\"language-text\">RDBMS</code>마다 실제 동작방식과 구현은 다르므로 실제 사용하는 <code class=\"language-text\">RDBMS</code>의 동작방식을 확인해야함</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#mvccmulti-version-concurrency-control\">MVCC(Multi-Version Concurrency Control)</a></p>\n<ul>\n<li><a href=\"#read-committed-%EA%B2%A9%EB%A6%AC-%EB%A0%88%EB%B2%A8%EC%9D%98-mvcc\">read committed 격리 레벨의 MVCC</a></li>\n<li><a href=\"#repeatable-read-%EA%B2%A9%EB%A6%AC-%EB%A0%88%EB%B2%A8%EC%9D%98-mvcc\">repeatable read 격리 레벨의 MVCC</a></li>\n<li><a href=\"#read-uncommitted-%EA%B2%A9%EB%A6%AC-%EB%A0%88%EB%B2%A8%EC%9D%98-mvcc\">read uncommitted 격리 레벨의 MVCC</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EA%B3%BC-%EA%B2%A9%EB%A6%AC-%EB%A0%88%EB%B2%A8\">트랜잭션과 격리 레벨</a></p>\n</li>\n</ul>","frontmatter":{"title":"MVCC","date":"2025년 01월 17일","tags":["CS"]}}}]}},"pageContext":{"slug":"/lecture/DB/2025-01-17-MVCC/","previous":{"fields":{"slug":"/lecture/DB/2025-01-16-동시성-제어(lock)/"},"frontmatter":{"categories":["DB"],"title":"동시성 제어(lock)","date":"2025-01-16 18:00:00 +0900","tags":["CS"]}},"next":{"fields":{"slug":"/lecture/DB/2025-01-18-테이블-설계/"},"frontmatter":{"categories":["DB"],"title":"테이블 설계","date":"2025-01-18 18:00:00 +0900","tags":["CS"]}}}},"staticQueryHashes":[],"slicesMap":{}}