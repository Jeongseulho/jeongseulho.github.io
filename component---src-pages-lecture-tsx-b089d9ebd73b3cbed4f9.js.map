{"version":3,"file":"component---src-pages-lecture-tsx-b089d9ebd73b3cbed4f9.js","mappings":"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","sources":["webpack://seulog/./src/components/Common/NoContent.tsx","webpack://seulog/./src/layout/BaseLayout.tsx","webpack://seulog/./src/components/Lecture/LectureCard.tsx","webpack://seulog/./src/pages/lecture.tsx"],"sourcesContent":["import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { theme } from 'theme/index';\r\nimport { Heading2, Subtitle } from 'styles/typography';\r\n\r\nconst FlexContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  padding-top: 40px;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst Margin = styled.div`\r\n  margin-top: -20px;\r\n  margin-bottom: 12px;\r\n`;\r\n\r\nconst NoContent = () => {\r\n  return (\r\n    <FlexContainer>\r\n      <Margin>\r\n        <Heading2 textColor={theme.colors.bluegray[600]}>\r\n          피드가 '텅' 비었어요\r\n        </Heading2>\r\n      </Margin>\r\n      <Subtitle textColor={theme.colors.primary[200]}>\r\n        곧 새로운 소식이 올라올지도 몰라요!\r\n      </Subtitle>\r\n    </FlexContainer>\r\n  );\r\n};\r\n\r\nexport default NoContent;\r\n","import { Global, ThemeProvider } from '@emotion/react';\r\nimport styled from '@emotion/styled';\r\nimport React from 'react';\r\nimport { globalStyle } from 'styles';\r\nimport Footer from 'components/Navigation/Footer';\r\nimport Header from 'components/Navigation/Header';\r\nimport { theme } from 'theme/index';\r\nimport { mediaQuery } from 'theme/breakpoints';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nconst Body = styled.main`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n\r\n  max-width: 1200px;\r\n  width: 100%;\r\n  min-height: calc(100vh - 80px); // minus footer height\r\n  height: 100%;\r\n  padding: 0px 40px;\r\n  padding-top: 72px; // padding to header height\r\n  margin: 0 auto;\r\n  background-color: ${({ theme }) => theme.lightTheme.backgroundColor};\r\n  transition: all 0.5s ease-in-out;\r\n\r\n  ${mediaQuery.sm} {\r\n    padding: 40px 0px;\r\n    padding-top: 72px;\r\n  }\r\n`;\r\n\r\ntype BaseLayoutProps = {\r\n  path: string;\r\n  children: React.ReactNode;\r\n  meta?: {\r\n    title: string;\r\n    description: string;\r\n    image?: string;\r\n    url: string;\r\n  };\r\n};\r\n\r\nconst INITIAL_META = {\r\n  title: 'seulog',\r\n  description: '슬호의 블로그',\r\n  image: '/static/profile-image.png',\r\n  url: 'https://jeongseulho.github.io/',\r\n};\r\n\r\nconst BaseLayout = ({ path, children, meta }: BaseLayoutProps) => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Helmet>\r\n        <html lang=\"ko\" />\r\n        <title>{meta ? meta.title : INITIAL_META.title}</title>\r\n        <script\r\n          src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-XXXX\"\r\n          crossOrigin=\"anonymous\"\r\n          async\r\n        />\r\n        <meta\r\n          name=\"google-site-verification\"\r\n          content=\"i1k9fAJNvByDpCtfnvLiC1aCfhuag46Ftm5CVnntwrI\"\r\n        />\r\n        <meta\r\n          name=\"description\"\r\n          content={meta ? meta.description : INITIAL_META.description}\r\n        />\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n        <meta httpEquiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" />\r\n\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta\r\n          property=\"og:title\"\r\n          content={meta ? meta.title : INITIAL_META.title}\r\n        />\r\n        <meta\r\n          property=\"og:description\"\r\n          content={meta ? meta.description : INITIAL_META.description}\r\n        />\r\n        <meta\r\n          property=\"og:image\"\r\n          content={meta?.image ? meta?.image : INITIAL_META.image}\r\n        />\r\n        <meta property=\"og:url\" content={meta ? meta.url : INITIAL_META.url} />\r\n        <meta\r\n          property=\"og:site_name\"\r\n          content={meta ? meta.title : INITIAL_META.title}\r\n        />\r\n      </Helmet>\r\n      <Global styles={globalStyle} />\r\n      <Header path={path} />\r\n      <Body>{children}</Body>\r\n      <Footer />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default BaseLayout;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { Link } from 'gatsby';\r\n\r\nconst CategoryCard = styled(Link)`\r\n  display: block;\r\n  background: white;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  transition: transform 0.2s;\r\n  text-decoration: none;\r\n  color: inherit;\r\n\r\n  &:hover {\r\n    transform: translateY(-4px);\r\n\r\n    h2 {\r\n      color: ${({ theme }) => theme.colors.primary.default};\r\n    }\r\n  }\r\n`;\r\n\r\nconst ThumbnailWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  padding-bottom: 56.25%;\r\n  background: ${({ theme }) => theme.colors.dark[50]};\r\n`;\r\n\r\nconst Thumbnail = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n`;\r\n\r\nconst CardContent = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst CategoryTitle = styled.h2`\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  margin-bottom: 8px;\r\n  transition: color 0.3s;\r\n`;\r\n\r\nconst PostCount = styled.span`\r\n  font-size: 14px;\r\n  color: ${({ theme }) => theme.colors.dark[100]};\r\n`;\r\n\r\ninterface LectureCardProps {\r\n  category: {\r\n    fieldValue: string;\r\n    totalCount: number;\r\n    nodes: {\r\n      frontmatter: {\r\n        thumbnail?: {\r\n          childImageSharp: {\r\n            gatsbyImageData: {\r\n              images: {\r\n                fallback: {\r\n                  src: string;\r\n                };\r\n              };\r\n            };\r\n          };\r\n        };\r\n      };\r\n    }[];\r\n  };\r\n}\r\n\r\nconst LectureCard = ({ category }: LectureCardProps) => {\r\n  const thumbnail = category.nodes[0]?.frontmatter.thumbnail;\r\n\r\n  return (\r\n    <CategoryCard to={`/lecture/${category.fieldValue}`}>\r\n      <ThumbnailWrapper>\r\n        {thumbnail && (\r\n          <Thumbnail\r\n            src={thumbnail.childImageSharp.gatsbyImageData.images.fallback.src}\r\n            alt={category.fieldValue}\r\n          />\r\n        )}\r\n      </ThumbnailWrapper>\r\n      <CardContent>\r\n        <CategoryTitle>{category.fieldValue}</CategoryTitle>\r\n        <PostCount>{category.totalCount}개의 포스트</PostCount>\r\n      </CardContent>\r\n    </CategoryCard>\r\n  );\r\n};\r\n\r\nexport default LectureCard;\r\n","import React from 'react';\r\nimport BaseLayout from '../layout/BaseLayout';\r\nimport { PATH } from '../routes/path';\r\nimport { Guidance2, Summary } from '../styles/typography';\r\nimport styled from '@emotion/styled';\r\nimport { theme } from '../theme';\r\nimport { graphql } from 'gatsby';\r\nimport NoContent from '../components/Common/NoContent';\r\nimport LectureCard from '../components/Lecture/LectureCard';\r\nconst LectureWrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 60px 0px;\r\n`;\r\n\r\nconst LectureHead = styled.div`\r\n  width: 100%;\r\n  padding: 0px 16px;\r\n  padding-bottom: 40px;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.dark[50]};\r\n  margin-bottom: 40px;\r\n`;\r\n\r\nconst Margin = styled.div`\r\n  margin-top: 4px;\r\n`;\r\n\r\nconst LectureGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(1, 1fr);\r\n  gap: 24px;\r\n  padding: 0 16px;\r\n\r\n  @media (min-width: 768px) {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n\r\n  @media (min-width: 1024px) {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n`;\r\n\r\ntype LecturePageProps = {\r\n  data: {\r\n    site: {\r\n      siteMetadata: {\r\n        title: string;\r\n        description: string;\r\n        siteUrl: string;\r\n      };\r\n    };\r\n    allMarkdownRemark: {\r\n      group: {\r\n        fieldValue: string;\r\n        totalCount: number;\r\n        nodes: {\r\n          id: string;\r\n          fields: {\r\n            slug: string;\r\n          };\r\n          frontmatter: {\r\n            title: string;\r\n            date: string;\r\n            thumbnail: {\r\n              childImageSharp: {\r\n                gatsbyImageData: {\r\n                  images: {\r\n                    fallback: {\r\n                      src: string;\r\n                    };\r\n                  };\r\n                };\r\n              };\r\n            };\r\n          };\r\n        }[];\r\n      }[];\r\n    };\r\n  };\r\n};\r\n\r\nconst LecturePage = ({\r\n  data: {\r\n    site: {\r\n      siteMetadata: { title, description, siteUrl },\r\n    },\r\n    allMarkdownRemark: { group },\r\n  },\r\n}: LecturePageProps) => {\r\n  return (\r\n    <BaseLayout path={PATH.lecture} meta={{ title, description, url: siteUrl }}>\r\n      <LectureWrapper>\r\n        <LectureHead>\r\n          <Guidance2>Lecture</Guidance2>\r\n          <Margin />\r\n          <Summary textColor={theme.colors.dark[100]}>강의 노트 모음</Summary>\r\n        </LectureHead>\r\n        {group.length > 0 ? (\r\n          <LectureGrid>\r\n            {group.map(category => (\r\n              <LectureCard key={category.fieldValue} category={category} />\r\n            ))}\r\n          </LectureGrid>\r\n        ) : (\r\n          <NoContent />\r\n        )}\r\n      </LectureWrapper>\r\n    </BaseLayout>\r\n  );\r\n};\r\n\r\nexport default LecturePage;\r\n\r\nexport const lectureQuery = graphql`\r\n  query LectureQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        siteUrl\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      filter: { fields: { slug: { regex: \"/lecture/\" } } }\r\n      sort: { frontmatter: { date: ASC } }\r\n    ) {\r\n      group(field: { frontmatter: { categories: SELECT } }) {\r\n        fieldValue\r\n        totalCount\r\n        nodes {\r\n          id\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"YYYY.MM.DD\")\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData(width: 400)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["FlexContainer","_styled","target","name","styles","Margin","NoContent","___EmotionJSX","Heading2","textColor","theme","Subtitle","Body","_ref","lightTheme","backgroundColor","mediaQuery","INITIAL_META","_ref2","path","children","meta","ThemeProvider","Helmet","lang","title","src","crossOrigin","async","content","description","httpEquiv","property","image","url","Global","globalStyle","Header","Footer","CategoryCard","Link","colors","primary","default","ThumbnailWrapper","dark","Thumbnail","CardContent","CategoryTitle","PostCount","_ref3","_ref4","_category$nodes$","category","thumbnail","nodes","frontmatter","to","fieldValue","childImageSharp","gatsbyImageData","images","fallback","alt","totalCount","LectureWrapper","LectureHead","LectureGrid","data","site","siteMetadata","siteUrl","allMarkdownRemark","group","BaseLayout","PATH","Guidance2","Summary","length","map","LectureCard","key"],"sourceRoot":""}